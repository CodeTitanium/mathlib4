/-
Copyright (c) 2024 Bj√∏rn Kjos-Hanssen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bj√∏rn Kjos-Hanssen
-/
import Mathlib.Analysis.Calculus.FirstDerivativeTest
/-!
# The Second-Derivative Test

We prove the Second-Derivative test from calculus using the First-Derivative test.


## Main results

* `isLocalMin_of_deriv_deriv_pos`: The second-derivative test.

## Tags

derivative test, calculus
-/

open Set Filter Topology



/-- If `f''(x) > 0` then `f' > 0` on an interval to the right of `x`. -/
lemma deriv_pos_of_deriv_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù}  {x‚ÇÄ : ‚Ñù} (hf : deriv (deriv f) x‚ÇÄ > 0)
    (hd : deriv f x‚ÇÄ = 0) :
    ‚àÉ u, x‚ÇÄ < u ‚àß ‚àÄ b, b ‚àà Ioo x‚ÇÄ u ‚Üí deriv f b > 0 := by
    have hD' : DifferentiableAt ‚Ñù (deriv f) x‚ÇÄ := by
        have :deriv (deriv f) x‚ÇÄ ‚â† 0 := by linarith
        exact differentiableAt_of_deriv_ne_zero this
    have h‚ÇÄ := (@hasDerivAt_deriv_iff ‚Ñù _ ‚Ñù _ _ (deriv f) x‚ÇÄ).mpr (hD')
    have h‚ÇÅ := hasDerivAt_iff_tendsto_slope.mp h‚ÇÄ
    rw [tendsto_nhds] at h‚ÇÅ

    have j‚ÇÅ: slope (deriv f) x‚ÇÄ ‚Åª¬π' Ioi 0 ‚àà ùìù[>] x‚ÇÄ :=
      nhds_right'_le_nhds_ne x‚ÇÄ <|h‚ÇÅ (Set.Ioi 0) isOpen_Ioi hf
    obtain ‚ü®u,hu‚ü© := (@mem_nhdsWithin_Ioi_iff_exists_mem_Ioc_Ioo_subset ‚Ñù _ _ _ x‚ÇÄ
      (x‚ÇÄ + 1) (slope (deriv f) x‚ÇÄ ‚Åª¬π' Ioi 0) (by simp)).mp j‚ÇÅ
    unfold slope at hu
    rw [hd] at hu
    have G‚ÇÄ : ‚àÄ b, b ‚àà Ioo x‚ÇÄ u ‚Üí deriv f b > 0 := by
      intro b hb
      have := hu.2 hb
      simp at this
      have q‚ÇÄ : b - x‚ÇÄ > 0 := by aesop
      aesop
    use u
    simp at hu
    tauto

/-- Added to Mathlib by Yael Dilles. -/
lemma neg_of_neg_of_div_pos (a b : ‚Ñù) (h : 0 < a/b) (h‚ÇÅ : b < 0) : a < 0 := by
    contrapose h
    rw [not_lt]
    rw [not_lt] at h
    exact div_nonpos_of_nonneg_of_nonpos h (by linarith)

/-- If `f''(x) > 0` then `f' < 0` on an interval to the left of `x`. -/
lemma deriv_neg_of_deriv_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù}  {x‚ÇÄ : ‚Ñù} (hf : deriv (deriv f) x‚ÇÄ > 0)
    (hd : deriv f x‚ÇÄ = 0) :
    ‚àÉ u, x‚ÇÄ > u ‚àß ‚àÄ b, b ‚àà Ioo u x‚ÇÄ ‚Üí deriv f b < 0 := by
    have hD' : DifferentiableAt ‚Ñù (deriv f) x‚ÇÄ := by
        have :deriv (deriv f) x‚ÇÄ ‚â† 0 := by linarith
        exact differentiableAt_of_deriv_ne_zero this
    have h‚ÇÄ := (@hasDerivAt_deriv_iff ‚Ñù _ ‚Ñù _ _ (deriv f) x‚ÇÄ).mpr (hD')
    have h‚ÇÅ := hasDerivAt_iff_tendsto_slope.mp h‚ÇÄ
    rw [tendsto_nhds] at h‚ÇÅ
    have := h‚ÇÅ (Set.Ioi 0) isOpen_Ioi hf

    have j‚ÇÄ: slope (deriv f) x‚ÇÄ ‚Åª¬π' Ioi 0 ‚àà ùìù[<] x‚ÇÄ :=
      nhds_left'_le_nhds_ne x‚ÇÄ this
    obtain ‚ü®u,hu‚ü© := (@mem_nhdsWithin_Iio_iff_exists_mem_Ico_Ioo_subset ‚Ñù _ _ _ x‚ÇÄ
      (x‚ÇÄ - 1) (slope (deriv f) x‚ÇÄ ‚Åª¬π' Ioi 0) (by simp)).mp j‚ÇÄ
    unfold slope at hu
    rw [hd] at hu
    have G‚ÇÅ : ‚àÄ b, b ‚àà Ioo u x‚ÇÄ ‚Üí deriv f b < 0 := by
      intro b hb
      have hub := hu.2 hb
      simp at hub
      have q‚ÇÄ : b - x‚ÇÄ < 0 := by aesop
      field_simp at hub
      apply neg_of_neg_of_div_pos
      exact hub
      exact q‚ÇÄ
    use u
    simp at hu
    tauto

/-- If `f''(x) > 0` then `f'` changes sign at `x`. -/
lemma deriv_neg_pos_of_deriv_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù}  {x‚ÇÄ : ‚Ñù}
    (hf : deriv (deriv f) x‚ÇÄ > 0) (hd : deriv f x‚ÇÄ = 0) :
    ‚àÉ Œµ, Œµ > 0 ‚àß (‚àÄ b, b ‚àà Ioo (x‚ÇÄ-Œµ) x‚ÇÄ ‚Üí deriv f b < 0) ‚àß
        ‚àÄ b, b ‚àà Ioo x‚ÇÄ (x‚ÇÄ + Œµ) ‚Üí 0 < deriv f b := by
  obtain ‚ü®u‚ÇÄ,hu‚ÇÄ‚ü© := deriv_pos_of_deriv_deriv_pos hf hd
  obtain ‚ü®u‚ÇÅ,hu‚ÇÅ‚ü© := deriv_neg_of_deriv_deriv_pos hf hd
  use (1/2) * min (u‚ÇÄ - x‚ÇÄ) (x‚ÇÄ - u‚ÇÅ)
  constructor
  ¬∑ aesop
  ¬∑ constructor
    ¬∑ intro b hb
      apply hu‚ÇÅ.2
      simp_all
      refine lt_trans ?_ hb.1
      have :  u‚ÇÅ < x‚ÇÄ - 2‚Åª¬π * (x‚ÇÄ - u‚ÇÅ) := by
        have : u‚ÇÅ = x‚ÇÄ - (x‚ÇÄ - u‚ÇÅ) := by ring_nf
        nth_rewrite 1 [this]
        suffices x‚ÇÄ - u‚ÇÅ > 2‚Åª¬π * (x‚ÇÄ - u‚ÇÅ) by
            exact sub_lt_sub_left this x‚ÇÄ
        show x‚ÇÄ - u‚ÇÅ > 2‚Åª¬π * (x‚ÇÄ - u‚ÇÅ)
        suffices  2 * (x‚ÇÄ - u‚ÇÅ) > 2 * (2‚Åª¬π * (x‚ÇÄ - u‚ÇÅ)) by
            refine (inv_mul_lt_iff‚ÇÄ ?hc).mpr ?_
            simp
            refine lt_two_mul_self ?ha
            simp
            tauto
        simp
        apply lt_two_mul_self
        simp
        tauto
      have T‚ÇÄ : 2‚Åª¬π * min (u‚ÇÄ - x‚ÇÄ) (x‚ÇÄ - u‚ÇÅ) ‚â§ 2‚Åª¬π * (x‚ÇÄ - u‚ÇÅ) := by
        refine (inv_mul_le_iff‚ÇÄ ?hc).mpr ?_
        simp
      calc _ < _ := this
      _ ‚â§ _ := tsub_le_tsub_left T‚ÇÄ x‚ÇÄ
    ¬∑ intro b hb
      apply hu‚ÇÄ.2
      simp_all
      refine lt_trans hb.2 ?_
      calc _ ‚â§ x‚ÇÄ + 2‚Åª¬π * (u‚ÇÄ - x‚ÇÄ) := by simp
      _ < _ := by
        suffices 2 * (x‚ÇÄ + 2‚Åª¬π * (u‚ÇÄ - x‚ÇÄ)) < 2 * u‚ÇÄ by
            linarith
        rw [mul_add, ‚Üê mul_assoc]
        simp
        linarith

/-- The Second-Derivative Test from calculus. -/
theorem isLocalMin_of_deriv_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù}  {x‚ÇÄ : ‚Ñù}
    (hf : deriv (deriv f) x‚ÇÄ > 0) (hd : deriv f x‚ÇÄ = 0)
    (hc : ContinuousAt f x‚ÇÄ) : IsLocalMin f x‚ÇÄ := by
 obtain ‚ü®Œµ,hŒµ‚ü© := deriv_neg_pos_of_deriv_deriv_pos hf hd
 have hD' : ‚àÄ·∂† x in ùìù[‚â†] x‚ÇÄ, DifferentiableAt ‚Ñù f x := by
    use Ioo (x‚ÇÄ-Œµ) (x‚ÇÄ+Œµ) ‚à™ {x| DifferentiableAt ‚Ñù f x}
    constructor
    suffices Ioo (x‚ÇÄ-Œµ) (x‚ÇÄ+Œµ) ‚àà ùìù x‚ÇÄ by
        refine mem_interior_iff_mem_nhds.mp ?_;
        suffices x‚ÇÄ ‚àà interior (Ioo (x‚ÇÄ - Œµ) (x‚ÇÄ + Œµ)) by
            refine mem_interior.mpr ?_
            use Ioo (x‚ÇÄ - Œµ) (x‚ÇÄ + Œµ)
            simp
            constructor
            exact isOpen_Ioo
            tauto
        exact mem_interior_iff_mem_nhds.mpr this
    refine Ioo_mem_nhds ?h.left.ha ?h.left.hb
    linarith;linarith
    by_cases H : DifferentiableAt ‚Ñù f x‚ÇÄ
    use Set.univ
    simp
    ext z
    constructor
    intro h
    simp
    right
    simp_all
    intro h
    apply h.elim
    intro h
    by_cases H' : z < x‚ÇÄ
    ¬∑ simp
      apply differentiableAt_of_deriv_ne_zero
      apply ne_of_lt
      apply hŒµ.2.1
      simp_all
    ¬∑ by_cases G : z = x‚ÇÄ
      ¬∑ subst G
        simp_all

      have : x‚ÇÄ < z := by
        have := h.2; simp at this
        simp at H'
        exact lt_of_le_of_ne H' fun a ‚Ü¶ G (id (Eq.symm a))
      simp
      apply differentiableAt_of_deriv_ne_zero
      apply ne_of_gt
      apply hŒµ.2.2
      simp_all


    ¬∑ tauto
    use {x‚ÇÄ}·∂ú
    simp
    ext z
    constructor
    intro h
    constructor
    ¬∑ tauto
    ¬∑ simp_all;intro hc;subst hc;tauto
    intro h
    apply h.1.elim
    intro h'
    by_cases H' : z < x‚ÇÄ
    ¬∑ simp
      apply differentiableAt_of_deriv_ne_zero
      apply ne_of_lt
      apply hŒµ.2.1
      simp_all
    ¬∑ have : x‚ÇÄ < z := by
        have := h.2; simp at this
        simp at H'
        exact lt_of_le_of_ne H' fun a ‚Ü¶ this (id (Eq.symm a))
      simp
      apply differentiableAt_of_deriv_ne_zero
      apply ne_of_gt
      apply hŒµ.2.2
      simp_all
    tauto

 obtain ‚ü®p,hp‚ü© := hD'
 have hm‚ÇÄ := mem_nhds_iff_exists_Ioo_subset.mp hp.1
 obtain ‚ü®l,u,hlu‚ü© := hm‚ÇÄ
 let Œ¥ := min (x‚ÇÄ - l) (u - x‚ÇÄ)
 let Œ∂ := (1/2) * min Œ¥ Œµ
 apply isLocalMin_of_deriv_Ioo
 ¬∑ show x‚ÇÄ - Œ∂ < x‚ÇÄ
   have : Œ∂ > 0 := by aesop
   linarith
 ¬∑ show x‚ÇÄ < x‚ÇÄ + Œ∂
   aesop
 ¬∑ exact hc

 ¬∑ obtain ‚ü®b,hb‚ü© := hp.2
   simp at hb
   intro x hx
   apply DifferentiableAt.differentiableWithinAt
   suffices x ‚àà p ‚à© b by
    rw [‚Üê hb.2] at this
    exact this
   simp
   constructor
   ¬∑    apply hlu.2
        simp_all
        constructor
        ¬∑   refine lt_trans ?_ hx.1
            show l < x‚ÇÄ - (1/2) * min Œ¥ Œµ
            suffices l < x‚ÇÄ - (1/2) * Œ¥ by
                have : min Œ¥ Œµ ‚â§ Œ¥ := min_le_left Œ¥ Œµ
                linarith
            show l < x‚ÇÄ - (1/2) * min (x‚ÇÄ - l) (u - x‚ÇÄ)
            suffices l < x‚ÇÄ - (1/2) * (x‚ÇÄ - l) by
                have : min (x‚ÇÄ - l) (u - x‚ÇÄ) ‚â§ (x‚ÇÄ - l) := by apply min_le_left
                linarith
            linarith
        ¬∑ linarith
   ¬∑ apply hb.1;simp at hx;simp;linarith
 ¬∑ obtain ‚ü®b,hb‚ü© := hp.2
   simp at hb
   intro x hx
   apply DifferentiableAt.differentiableWithinAt
   suffices x ‚àà p ‚à© b by
    rw [‚Üê hb.2] at this
    exact this
   simp
   constructor
   ¬∑    apply hlu.2
        simp_all
        constructor
        ¬∑ linarith
        ¬∑   refine lt_trans hx.2 ?_
            show x‚ÇÄ + (1/2) * min Œ¥ Œµ < u
            suffices x‚ÇÄ + (1/2) * Œ¥ < u by
                have : min Œ¥ Œµ ‚â§ Œ¥ := min_le_left Œ¥ Œµ
                linarith
            show x‚ÇÄ + (1/2) * min (x‚ÇÄ - l) (u - x‚ÇÄ) < u
            suffices x‚ÇÄ + 1 / 2 * (u - x‚ÇÄ) < u by
                have : min (x‚ÇÄ - l) (u - x‚ÇÄ) ‚â§ (u - x‚ÇÄ) := by apply min_le_right
                linarith
            linarith
   ¬∑ apply hb.1;simp at hx;simp;linarith
 ¬∑ intro x hx
   apply le_of_lt
   have : x ‚àà Ioo (x‚ÇÄ - Œµ) x‚ÇÄ := by
    simp_all
    have : x‚ÇÄ - Œµ ‚â§ x‚ÇÄ - Œ∂ := by
        show x‚ÇÄ - Œµ ‚â§ x‚ÇÄ - (1/2) * min Œ¥ Œµ
        suffices x‚ÇÄ ‚â§ x‚ÇÄ + (1/2) * (Œµ - min Œ¥ Œµ) by
            linarith
        aesop
    linarith
   aesop
 ¬∑ intro x hx
   apply le_of_lt
   have : x ‚àà Ioo x‚ÇÄ (x‚ÇÄ + Œµ) := by
    simp_all
    have : x‚ÇÄ - Œµ ‚â§ x‚ÇÄ - Œ∂ := by
        show x‚ÇÄ - Œµ ‚â§ x‚ÇÄ - (1/2) * min Œ¥ Œµ
        suffices x‚ÇÄ ‚â§ x‚ÇÄ + (1/2) * (Œµ - min Œ¥ Œµ) by linarith
        aesop
    linarith
   apply hŒµ.2.2
   simp_all
