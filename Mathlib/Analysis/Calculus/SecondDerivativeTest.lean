/-
Copyright (c) 2024 Bj√∏rn Kjos-Hanssen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bj√∏rn Kjos-Hanssen
-/
import Mathlib.Analysis.Calculus.FirstDerivativeTest
import Mathlib.Algebra.Order.GroupWithZero.Unbundled
/-!
# The Second-Derivative Test

We prove the Second-Derivative test from calculus using the First-Derivative test.
Source: [Wikipedia](https://en.wikipedia.org/wiki/Derivative_test#Proof_of_the_second-derivative_test).

## Main results

* `isLocalMin_of_deriv_deriv_pos`: The second-derivative test.

## Tags

derivative test, calculus
-/

open Set Filter Topology

/-- Add to Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean -/
lemma neg_of_div_pos_left (a b : ‚Ñù) (h : 0 < a/b) (h‚ÇÅ : b < 0) : a < 0 := by
  contrapose h
  rw [not_lt] at h ‚ä¢
  exact div_nonpos_of_nonneg_of_nonpos h (le_of_lt h‚ÇÅ)

/-- If `f''(x) > 0` then `f' < 0` on an interval to the left of `x`. -/
lemma deriv_neg_of_deriv_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù}  {x‚ÇÄ : ‚Ñù} (hf : deriv (deriv f) x‚ÇÄ > 0)
    (hd : deriv f x‚ÇÄ = 0) : ‚àÉ u < x‚ÇÄ, ‚àÄ b ‚àà Ioo u x‚ÇÄ, deriv f b < 0 := by
    obtain ‚ü®u,hu‚ü© := (mem_nhdsWithin_Iio_iff_exists_mem_Ico_Ioo_subset
      (show x‚ÇÄ - 1 < x‚ÇÄ by simp)).mp
        <| nhds_left'_le_nhds_ne x‚ÇÄ
        <| (tendsto_nhds.mp
          <| hasDerivAt_iff_tendsto_slope.mp
          <| hasDerivAt_deriv_iff.mpr (differentiableAt_of_deriv_ne_zero <| ne_of_gt hf))
        (Set.Ioi 0) isOpen_Ioi hf
    unfold slope at hu
    rw [hd] at hu
    have G‚ÇÅ : ‚àÄ b ‚àà Ioo u x‚ÇÄ, deriv f b < 0 := fun b hb => neg_of_div_pos_left _ _ (by
        have hub := hu.2 hb
        field_simp at hub
        exact hub
      ) (by aesop)
    exact ‚ü®u, hu.1.2, G‚ÇÅ‚ü©

/-- If `f''(x) > 0` then `f' > 0` on an interval to the right of `x`. -/
lemma deriv_pos_of_deriv_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù}  {x‚ÇÄ : ‚Ñù} (hf : deriv (deriv f) x‚ÇÄ > 0)
    (hd : deriv f x‚ÇÄ = 0) : ‚àÉ u > x‚ÇÄ, ‚àÄ b ‚àà Ioo x‚ÇÄ u, deriv f b > 0 := by
  obtain ‚ü®u,hu‚ü© := (mem_nhdsWithin_Ioi_iff_exists_mem_Ioc_Ioo_subset (show x‚ÇÄ < x‚ÇÄ + 1 by simp)).mp
      <| nhds_right'_le_nhds_ne x‚ÇÄ
      <|(tendsto_nhds.mp <| hasDerivAt_iff_tendsto_slope.mp
        <| hasDerivAt_deriv_iff.mpr (differentiableAt_of_deriv_ne_zero <| ne_of_gt hf))
        (Set.Ioi 0) isOpen_Ioi hf
  unfold slope at hu
  rw [hd] at hu
  have G‚ÇÄ : ‚àÄ b ‚àà Ioo x‚ÇÄ u, deriv f b > 0 := fun b hb => by
    have := hu.2 hb
    simp only [vsub_eq_sub, sub_zero, smul_eq_mul, mem_preimage, mem_Ioi] at this
    exact pos_of_mul_pos_right this <|le_of_lt (by aesop)
  exact ‚ü®u, hu.1.1, G‚ÇÄ‚ü©

/-- If `f''(x) > 0` then `f'` changes sign at `x`.
This lemma applies to functions like `x^2 + 1[x ‚â• 0]` as well as twice differentiable
functions.
-/
lemma deriv_neg_pos_of_deriv_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù}  {x‚ÇÄ : ‚Ñù}
    (hf : deriv (deriv f) x‚ÇÄ > 0) (hd : deriv f x‚ÇÄ = 0) :
    ‚àÉ Œµ > 0, (‚àÄ b ‚àà Ioo (x‚ÇÄ-Œµ) x‚ÇÄ, deriv f b < 0) ‚àß
              ‚àÄ b ‚àà Ioo x‚ÇÄ (x‚ÇÄ + Œµ), 0 < deriv f b := by
  obtain ‚ü®u‚ÇÄ,hu‚ÇÄ‚ü© := deriv_pos_of_deriv_deriv_pos hf hd
  obtain ‚ü®u‚ÇÅ,hu‚ÇÅ‚ü© := deriv_neg_of_deriv_deriv_pos hf hd
  have h‚ÇÅ : x‚ÇÄ - (x‚ÇÄ - u‚ÇÅ) < x‚ÇÄ - 2‚Åª¬π * (x‚ÇÄ - u‚ÇÅ) := sub_lt_sub_left
    ((inv_mul_lt_iff‚ÇÄ zero_lt_two).mpr <|lt_two_mul_self <|sub_pos.mpr hu‚ÇÅ.1) x‚ÇÄ
  have h‚ÇÇ : 2 * (x‚ÇÄ + 2‚Åª¬π * (u‚ÇÄ - x‚ÇÄ)) < 2 * u‚ÇÄ := by
    ring_nf
    rw [mul_two, add_lt_add_iff_right]
    exact hu‚ÇÄ.1
  use 2‚Åª¬π * min (u‚ÇÄ - x‚ÇÄ) (x‚ÇÄ - u‚ÇÅ)
  constructor
  ¬∑ aesop
  ¬∑ constructor
    ¬∑ exact fun b hb => hu‚ÇÅ.2 _ <| by
        simp_all only [mem_Ioo, and_imp, sub_sub_cancel, Nat.ofNat_pos, mul_lt_mul_left, and_true]
        calc u‚ÇÅ < _ := h‚ÇÅ
             _  ‚â§ _ := tsub_le_tsub_left ((inv_mul_le_iff‚ÇÄ zero_lt_two).mpr (by simp)) x‚ÇÄ
             _  < _ := hb.1
    ¬∑ exact fun b hb => hu‚ÇÄ.2 _ <| ‚ü®hb.1,
        calc _ < _                    := hb.2
             _ ‚â§ x‚ÇÄ + 2‚Åª¬π * (u‚ÇÄ - x‚ÇÄ) := by simp
             _ < _                    := by rw[‚Üê mul_lt_mul_left zero_lt_two]; exact h‚ÇÇ‚ü©

theorem differentiableOn_right {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ : ‚Ñù}
    {p : Set ‚Ñù} (hp2 : ‚àÉ b ‚àà ùìü {x‚ÇÄ}·∂ú, {x | DifferentiableAt ‚Ñù f x} = p ‚à© b)
    {l u : ‚Ñù} (hlu1 : x‚ÇÄ ‚àà Ioo l u) (hlu2: Ioo l u ‚äÜ p) :
    DifferentiableOn ‚Ñù f (Ioo x‚ÇÄ u) := fun x hx => DifferentiableAt.differentiableWithinAt <| by
  obtain ‚ü®b,hb‚ü© := hp2
  have : x ‚àà p ‚à© b := ‚ü®hlu2 <|by
      simp_all only [mem_Ioo, mem_principal, and_true]
      exact lt_trans hlu1.1 hx.1, hb.1 <| ne_of_gt hx.1‚ü©
  rw [‚Üê hb.2] at this
  exact this

theorem differentiableOn_left {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ : ‚Ñù}
    {p : Set ‚Ñù} (hp2 : ‚àÉ b ‚àà ùìü {x‚ÇÄ}·∂ú, {x | DifferentiableAt ‚Ñù f x} = p ‚à© b)
    {l u : ‚Ñù} (hlu1 : x‚ÇÄ ‚àà Ioo l u) (hlu2: Ioo l u ‚äÜ p) :
    DifferentiableOn ‚Ñù f (Ioo l x‚ÇÄ) := fun x hx => DifferentiableAt.differentiableWithinAt <| by
  obtain ‚ü®b,hb‚ü© := hp2
  have : x ‚àà p ‚à© b := ‚ü®hlu2 <|by
      simp_all only [mem_Ioo, mem_principal, true_and]
      exact lt_trans hx.2 hlu1.2, hb.1 <| ne_of_lt hx.2‚ü©
  rw [‚Üê hb.2] at this
  exact this

/-- Insert a missing point between two adjacent open intervals. -/
theorem insert_Ioo {x Œµ‚ÇÄ Œµ‚ÇÅ : ‚Ñù} (hŒµ‚ÇÄ : Œµ‚ÇÄ > 0) (hŒµ‚ÇÅ : Œµ‚ÇÅ > 0):
    insert x (Ioo (x - Œµ‚ÇÄ) x ‚à™ Ioo x (x + Œµ‚ÇÅ)) = Ioo (x - Œµ‚ÇÄ) (x + Œµ‚ÇÅ) := by
  rw [‚Üê insert_union, Ioo_insert_right (by linarith)]
  exact Ioc_union_Ioo_eq_Ioo (by linarith) (by linarith)

/-- Already in FirstDerivativeTest? -/
theorem eventually_differentiable_of_deriv_nonzero {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ Œµ : ‚Ñù}
    (hŒµ : Œµ > 0 ‚àß (‚àÄ b ‚àà Ioo (x‚ÇÄ - Œµ) x‚ÇÄ, deriv f b < 0)
                ‚àß ‚àÄ b ‚àà Ioo x‚ÇÄ (x‚ÇÄ + Œµ), 0 < deriv f b) :
    ‚àÄ·∂† x in ùìù[‚â†] x‚ÇÄ, DifferentiableAt ‚Ñù f x :=
  Eventually.mono
    (eventually_mem_set.mpr <| insert_mem_nhds_iff.mp <| insert_Ioo hŒµ.1 hŒµ.1 ‚ñ∏
    Ioo_mem_nhds (by linarith) (by linarith))
    fun _ hb => differentiableAt_of_deriv_ne_zero <| hb.elim
      (fun h => ne_of_lt <| hŒµ.2.1 _ h)
      (fun h => ne_of_gt <| hŒµ.2.2 _ h)

/-- The Second-Derivative Test from calculus. -/
theorem isLocalMin_of_deriv_deriv_pos {f : ‚Ñù ‚Üí ‚Ñù}  {x‚ÇÄ : ‚Ñù}
    (hf : deriv (deriv f) x‚ÇÄ > 0) (hd : deriv f x‚ÇÄ = 0)
    (hc : ContinuousAt f x‚ÇÄ) : IsLocalMin f x‚ÇÄ := by
  obtain ‚ü®Œµ,hŒµ‚ü©    := deriv_neg_pos_of_deriv_deriv_pos hf hd
  obtain ‚ü®p,hp‚ü©    := eventually_differentiable_of_deriv_nonzero hŒµ
  obtain ‚ü®l,u,hlu‚ü© := mem_nhds_iff_exists_Ioo_subset.mp hp.1
  let Œ¥ := min (x‚ÇÄ - l) (u - x‚ÇÄ)
  have hŒ∂ : (1/2) * min Œ¥ Œµ > 0 := by aesop
  have hŒ∂‚ÇÄ : x‚ÇÄ - (1/2) * min Œ¥ Œµ < x‚ÇÄ := by linarith
  have hŒ∂‚ÇÅ : x‚ÇÄ < x‚ÇÄ + (1/2) * min Œ¥ Œµ := by linarith
  have hŒµŒ∂ : x‚ÇÄ - Œµ ‚â§ x‚ÇÄ - (1/2) * min Œ¥ Œµ := by
    suffices x‚ÇÄ ‚â§ x‚ÇÄ + (1/2) * (Œµ - min Œ¥ Œµ) by linarith
    aesop
  have hu :  x‚ÇÄ + (1/2) * min Œ¥ Œµ ‚â§ u := by
    linarith[min_le_left Œ¥ Œµ, min_le_right (x‚ÇÄ - l) (u - x‚ÇÄ), hlu.1.2]
  have hl : l ‚â§ x‚ÇÄ - (1/2) * min Œ¥ Œµ := by
    linarith[min_le_left Œ¥ Œµ, min_le_left (x‚ÇÄ - l) (u - x‚ÇÄ), hlu.1.1]
  exact isLocalMin_of_deriv_Ioo hŒ∂‚ÇÄ hŒ∂‚ÇÅ hc
    ((differentiableOn_left hp.2 hlu.1 hlu.2).mono <| Ioo_subset_Ioo_left <| by linarith)
    ((differentiableOn_right hp.2 hlu.1 hlu.2).mono <| Ioo_subset_Ioo_right <| by linarith)
    (fun x hx => le_of_lt <| hŒµ.2.1 _ ‚ü®by simp only [mem_Ioo] at hx;linarith, hx.2‚ü©)
    (fun x hx => le_of_lt <| hŒµ.2.2 _ ‚ü®hx.1, by simp only [mem_Ioo] at hx;linarith‚ü©)
