/-
Copyright (c) 2024 Bj√∏rn Kjos-Hanssen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bj√∏rn Kjos-Hanssen
-/
import Mathlib.Analysis.Calculus.FirstDerivativeTest
import Mathlib.Order.Interval.Set.Basic

/-!
# The Second-Derivative Test

We prove the Second-Derivative test from calculus using the First-Derivative test.
Source: [Wikipedia](https://en.wikipedia.org/wiki/Derivative_test#Proof_of_the_second-derivative_test).

## Main results

* `isLocalMin_of_deriv_deriv_pos`: The second-derivative test, minimum version.

## Tags

derivative test, calculus
-/

open Set Filter Topology


/-- Insert a missing point between two adjacent open real intervals. -/
theorem insert_Ioo‚ÇÄ {x Œµ‚ÇÄ Œµ‚ÇÅ : ‚Ñù} (hŒµ‚ÇÄ : Œµ‚ÇÄ > 0) (hŒµ‚ÇÅ : Œµ‚ÇÅ > 0):
    insert x (Ioo (x - Œµ‚ÇÄ) x ‚à™ Ioo x (x + Œµ‚ÇÅ)) = Ioo (x - Œµ‚ÇÄ) (x + Œµ‚ÇÅ) :=
  insert_Ioo ‚ü®by linarith,by linarith‚ü©


section SecondDeriv

variable {f : ‚Ñù ‚Üí ‚Ñù} {x‚ÇÄ : ‚Ñù}

/-- If the slope from a critical point `x‚ÇÄ` to `b > x‚ÇÄ` is positive then so is the derivative
 at `b`. -/
lemma slopeSimpPos {b : ‚Ñù} (hb : x‚ÇÄ < b) (hbf : 0 < slope (deriv f) x‚ÇÄ b)
    (hf : deriv f x‚ÇÄ = 0) : 0 < deriv f b := by
  unfold slope at hbf
  rw [hf] at hbf
  simp_all

/-- If the slope from a critical point `x‚ÇÄ` to `b < x‚ÇÄ` is positive then the derivative
 at `b` is negative. -/
lemma slopeSimpNeg {b : ‚Ñù} (hb : b < x‚ÇÄ) (hbf : 0 < slope (deriv f) x‚ÇÄ b)
    (hf : deriv f x‚ÇÄ = 0) : deriv f b < 0 := by
  unfold slope at hbf
  simp_rw [smul_eq_mul, hf] at hbf
  rw [mul_comm] at hbf
  have : 0 < deriv f b / (b - x‚ÇÄ) := sub_zero (deriv f b) ‚ñ∏ hbf
  contrapose this
  exact not_lt.mpr <| div_nonpos_of_nonneg_of_nonpos (not_lt.mp this) (by linarith)

/-- If the derivative is negative (positive) to the left (right) then the
function is differentiable in a punctured neighborhood. -/
theorem eventually_differentiable_of_deriv_nonzero {Œµ : ‚Ñù}
    (hŒµ : Œµ > 0)
    (hŒµ‚ÇÄ : ‚àÄ b ‚àà Ioo (x‚ÇÄ - Œµ) x‚ÇÄ, deriv f b < 0)
    (hŒµ‚ÇÅ : ‚àÄ b ‚àà Ioo x‚ÇÄ (x‚ÇÄ + Œµ), 0 < deriv f b) :
    ‚àÄ·∂† x in ùìù[‚â†] x‚ÇÄ, DifferentiableAt ‚Ñù f x :=
    (eventually_mem_set.mpr <| insert_mem_nhds_iff.mp <| insert_Ioo‚ÇÄ hŒµ hŒµ ‚ñ∏
    Ioo_mem_nhds (by linarith) (by linarith)).mono
    fun _ hb => differentiableAt_of_deriv_ne_zero <| hb.elim
      (fun h => ne_of_lt <| hŒµ‚ÇÄ _ h)
      (fun h => ne_of_gt <| hŒµ‚ÇÅ _ h)


/-- If `f''(x) > 0` then `f' < 0` on an interval to the left of `x`. -/
lemma deriv_neg_of_deriv_deriv_pos (hf : deriv (deriv f) x‚ÇÄ > 0)
    (hd : deriv f x‚ÇÄ = 0) : ‚àÉ u < x‚ÇÄ, ‚àÄ b ‚àà Ioo u x‚ÇÄ, deriv f b < 0 := by
  obtain ‚ü®u,hu‚ü© := (mem_nhdsWithin_Iio_iff_exists_mem_Ico_Ioo_subset
    (show x‚ÇÄ - 1 < x‚ÇÄ by simp)).mp
      <| nhds_left'_le_nhds_ne x‚ÇÄ <| (tendsto_nhds.mp <| hasDerivAt_iff_tendsto_slope.mp
      (differentiableAt_of_deriv_ne_zero <| ne_of_gt hf).hasDerivAt) (Ioi 0) isOpen_Ioi hf
  exact ‚ü®u, hu.1.2, fun b hb => slopeSimpNeg hb.2 (hu.2 hb) hd‚ü©


/-- If `f''(x) > 0` then `f' > 0` on an interval to the right of `x`. -/
lemma deriv_pos_of_deriv_deriv_pos (hf : deriv (deriv f) x‚ÇÄ > 0)
    (hd : deriv f x‚ÇÄ = 0) : ‚àÉ u > x‚ÇÄ, ‚àÄ b ‚àà Ioo x‚ÇÄ u, deriv f b > 0 := by
  obtain ‚ü®u,hu‚ü© := (mem_nhdsWithin_Ioi_iff_exists_mem_Ioc_Ioo_subset (show x‚ÇÄ < x‚ÇÄ + 1 by simp)).mp
    <| nhds_right'_le_nhds_ne x‚ÇÄ <|(tendsto_nhds.mp <| hasDerivAt_iff_tendsto_slope.mp
    (differentiableAt_of_deriv_ne_zero <| ne_of_gt hf).hasDerivAt) (Ioi 0) isOpen_Ioi hf
  exact ‚ü®u, hu.1.1, fun b hb => slopeSimpPos hb.1 (hu.2 hb) hd‚ü©

/-- If `f''(x) > 0` then `f'` changes sign at `x`.
This lemma applies to functions like `x^2 + 1[x ‚â• 0]` as well as twice differentiable
functions.
-/
lemma deriv_neg_pos_of_deriv_deriv_pos
    (hf : deriv (deriv f) x‚ÇÄ > 0) (hd : deriv f x‚ÇÄ = 0) :
    ‚àÉ Œµ > 0, (‚àÄ b ‚àà Ioo (x‚ÇÄ-Œµ) x‚ÇÄ, deriv f b < 0) ‚àß
              ‚àÄ b ‚àà Ioo x‚ÇÄ (x‚ÇÄ + Œµ), 0 < deriv f b := by
  obtain ‚ü®u‚ÇÄ,hu‚ÇÄ‚ü© := deriv_pos_of_deriv_deriv_pos hf hd
  have h‚ÇÄ : 2 * (x‚ÇÄ + 2‚Åª¬π * (u‚ÇÄ - x‚ÇÄ)) < 2 * u‚ÇÄ := by
    ring_nf
    rw [mul_two, add_lt_add_iff_right]
    exact hu‚ÇÄ.1
  obtain ‚ü®u‚ÇÅ,hu‚ÇÅ‚ü© := deriv_neg_of_deriv_deriv_pos hf hd
  have h‚ÇÅ : x‚ÇÄ - (x‚ÇÄ - u‚ÇÅ) < x‚ÇÄ - 2‚Åª¬π * (x‚ÇÄ - u‚ÇÅ) := sub_lt_sub_left
    ((inv_mul_lt_iff‚ÇÄ zero_lt_two).mpr <|lt_two_mul_self <|sub_pos.mpr hu‚ÇÅ.1) x‚ÇÄ
  use 2‚Åª¬π * min (u‚ÇÄ - x‚ÇÄ) (x‚ÇÄ - u‚ÇÅ)
  constructor
  ¬∑ aesop
  ¬∑ constructor
    ¬∑ exact fun b hb => hu‚ÇÅ.2 _ <| by
        simp_all only [mem_Ioo, sub_sub_cancel, and_true]
        calc u‚ÇÅ < _ := h‚ÇÅ
             _  ‚â§ _ := tsub_le_tsub_left ((inv_mul_le_iff‚ÇÄ zero_lt_two).mpr (by simp)) x‚ÇÄ
             _  < _ := hb.1
    ¬∑ exact fun b hb => hu‚ÇÄ.2 _ ‚ü®hb.1,
        calc _ < _                    := hb.2
             _ ‚â§ x‚ÇÄ + 2‚Åª¬π * (u‚ÇÄ - x‚ÇÄ) := by simp
             _ < _                    := by rw[‚Üê mul_lt_mul_left zero_lt_two]; exact h‚ÇÄ‚ü©


/-- The Second-Derivative Test from calculus, minimum version. -/
theorem isLocalMin_of_deriv_deriv_pos
    (hf : deriv (deriv f) x‚ÇÄ > 0) (hd : deriv f x‚ÇÄ = 0)
    (hc : ContinuousAt f x‚ÇÄ) : IsLocalMin f x‚ÇÄ := by
  obtain ‚ü®Œµ,hŒµ‚ü©    := deriv_neg_pos_of_deriv_deriv_pos hf hd
  obtain ‚ü®p,hp‚ü©    := eventually_differentiable_of_deriv_nonzero hŒµ.1 hŒµ.2.1 hŒµ.2.2
  obtain ‚ü®l,u,hlu‚ü© := mem_nhds_iff_exists_Ioo_subset.mp hp.1
  let Œ¥ := min (x‚ÇÄ - l) (u - x‚ÇÄ)
  have hŒ∂ : (1/2) * min Œ¥ Œµ > 0 := by aesop
  have hŒ∂‚ÇÄ : x‚ÇÄ - (1/2) * min Œ¥ Œµ < x‚ÇÄ := by linarith
  have hŒ∂‚ÇÅ : x‚ÇÄ < x‚ÇÄ + (1/2) * min Œ¥ Œµ := by linarith
  have : x‚ÇÄ ‚â§ x‚ÇÄ + (1/2) * (Œµ - min Œ¥ Œµ) := by aesop
  have h‚ÇÄ :  l < x‚ÇÄ - 1 / 2 * min Œ¥ Œµ := by linarith[min_le_left Œ¥ Œµ, min_le_left (x‚ÇÄ - l) (u - x‚ÇÄ)]
  have h‚ÇÅ : x‚ÇÄ + 1 / 2 * min Œ¥ Œµ < u := by linarith[min_le_left Œ¥ Œµ, min_le_right (x‚ÇÄ - l) (u - x‚ÇÄ)]
  obtain ‚ü®b,hb‚ü© := hp.2
  exact isLocalMin_of_deriv_Ioo hŒ∂‚ÇÄ hŒ∂‚ÇÅ hc
    (fun _ hx => (hb.2.symm.subset ‚ü®hlu.2 ‚ü®h‚ÇÄ.trans hx.1, hx.2.trans hlu.1.2‚ü©,
      hb.1 <| ne_of_lt hx.2‚ü©).differentiableWithinAt)
    (fun _ hx => (hb.2.symm.subset ‚ü®hlu.2 ‚ü®hlu.1.1.trans hx.1, hx.2.trans h‚ÇÅ‚ü©,
      hb.1 <| ne_of_gt hx.1‚ü©).differentiableWithinAt)
    (fun _ hx => le_of_lt <| hŒµ.2.1 _ ‚ü®by simp only [mem_Ioo] at hx;linarith, hx.2‚ü©)
    (fun _ hx => le_of_lt <| hŒµ.2.2 _ ‚ü®hx.1, by simp only [mem_Ioo] at hx;linarith‚ü©)

end SecondDeriv
