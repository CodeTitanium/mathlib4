import Mathlib.NumberTheory.NumberField.Units.Basic
import Mathlib.RingTheory.RootsOfUnity.Complex

section misc

open Polynomial

theorem Polynomial.splits_of_degree_two {K L : Type*} [Field K] [Field L] (i : K ‚Üí+* L)
    {f : Polynomial K} (hf‚ÇÅ : f.natDegree = 2) (hf‚ÇÇ : ‚àÉ x : L, eval‚ÇÇ i x f = 0) :
    Splits i f := by
  have hf‚ÇÄ : f ‚â† 0 := ne_zero_of_natDegree_gt (hf‚ÇÅ ‚ñ∏ zero_lt_two)
  obtain ‚ü®x, hx‚ü© := hf‚ÇÇ
  rw [‚Üê mem_roots_map_of_injective i.injective hf‚ÇÄ, mem_roots'] at hx
  have h : (map i f /‚Çò (X - C x)).natDegree = 1 := by
    rw [natDegree_divByMonic _ (monic_X_sub_C x), natDegree_map, hf‚ÇÅ, natDegree_X_sub_C]
  rw [‚Üê splits_id_iff_splits, ‚Üê mul_divByMonic_eq_iff_isRoot.mpr hx.2]
  exact (splits_mul_iff _ (X_sub_C_ne_zero x) (by simp [ne_zero_of_natDegree_gt, h])).mpr
    ‚ü®splits_X_sub_C  _, splits_of_natDegree_le_one (RingHom.id L) (by rw [h])‚ü©

theorem normal_of_rank_eq_two (F K : Type*) [Field F] [Field K] [Algebra F K]
    (h : Module.finrank F K = 2) :
    Normal F K :=
{ isAlgebraic := by
    have : Module.Finite F K := Module.finite_of_finrank_eq_succ h
    exact fun x ‚Ü¶ Algebra.IsAlgebraic.isAlgebraic x
  splits' := by
    have : FiniteDimensional F K := Module.finite_of_finrank_eq_succ h
    intro x
    obtain h | h := le_iff_lt_or_eq.mp (h ‚ñ∏ minpoly.natDegree_le x)
    ¬∑ exact Polynomial.splits_of_natDegree_le_one _ (by rwa [Nat.le_iff_lt_add_one])
    ¬∑ exact Polynomial.splits_of_degree_two _ h ‚ü®x, minpoly.aeval F x‚ü© }

theorem IntermediateField.fixedField_top {F : Type*} [Field F] {E : Type*} [Field E] [Algebra F E]
    [FiniteDimensional F E] [IsGalois F E] :
    fixedField (‚ä§ : Subgroup (E ‚âÉ‚Çê[F] E)) = ‚ä• :=
  IsGalois.intermediateFieldEquivSubgroup.symm.map_bot

theorem IntermediateField.fixedField_bot {F : Type*} [Field F] {E : Type*} [Field E] [Algebra F E]
    [FiniteDimensional F E] [IsGalois F E] :
    fixedField (‚ä• : Subgroup (E ‚âÉ‚Çê[F] E)) = ‚ä§ :=
  IsGalois.intermediateFieldEquivSubgroup.symm.map_top

theorem Complex.conj_rootsOfUnity {Œ∂ : ‚ÑÇÀ£} {n : ‚Ñï} [NeZero n] (hŒ∂ : Œ∂ ‚àà rootsOfUnity n ‚ÑÇ) :
    (starRingEnd ‚ÑÇ) Œ∂ = Œ∂‚Åª¬π := by
  rw [‚Üê Units.mul_eq_one_iff_eq_inv, conj_mul', norm_eq_one_of_mem_rootsOfUnity hŒ∂, ofReal_one,
    one_pow]

end misc

noncomputable section

open NumberField InfinitePlace ComplexEmbedding NumberField.Units

class IsCMExtension (K L : Type*) [Field K] [NumberField K] [Field L] [NumberField L]
    [Algebra K L] : Prop where
  isTotallyComplex : IsTotallyComplex L
  isTotallyReal : IsTotallyReal K
  quadratic : Module.finrank K L = 2

namespace IsCMExtension

open scoped ComplexConjugate

variable (K L : Type*) [Field L] [NumberField L] [Field K] [NumberField K] [Algebra K L]

instance [IsCMExtension K L] : IsGalois K L :=
{ to_isSeparable := Algebra.IsSeparable.of_integral K L
  to_normal := normal_of_rank_eq_two _ _ quadratic }

variable {L}

theorem exists_isConj [hcm : IsCMExtension K L] (œÜ : L ‚Üí+* ‚ÑÇ) :
    ‚àÉ œÉ : L ‚âÉ‚Çê[K] L, IsConj œÜ œÉ :=
  exists_isConj_of_not_isUnramified <|
    not_isUnramified_iff.mpr ‚ü®hcm.isTotallyComplex.isComplex _, hcm.isTotallyReal.isReal _‚ü©

variable {K} in
theorem isConj_ne_one [hcm : IsCMExtension K L] {œÜ : L ‚Üí+* ‚ÑÇ} {œÉ : L ‚âÉ‚Çê[K] L} (hœÜ : IsConj œÜ œÉ) :
    œÉ ‚â† 1 := by
  by_contra h
  rw [h, isConj_one_iff, ‚Üê isReal_mk_iff] at hœÜ
  exact not_isComplex_iff_isReal.mpr hœÜ  (hcm.isTotallyComplex.isComplex _)

variable {K} in
theorem isConj_eq_isConj [hcm : IsCMExtension K L] {œÜ œà : L ‚Üí+* ‚ÑÇ} {œÉ œÑ : L ‚âÉ‚Çê[K] L}
    (hœÜ : IsConj œÜ œÉ) (hœà : IsConj œà œÑ) : œÉ = œÑ := by
  have : Fintype.card (L ‚âÉ‚Çê[K] L) = 2 := hcm.quadratic ‚ñ∏ IsGalois.card_aut_eq_finrank K L
  rw [‚Üê Nat.card_eq_fintype_card, Nat.card_eq_two_iff' 1] at this
  exact ExistsUnique.unique this (isConj_ne_one hœÜ) (isConj_ne_one hœà)

def complexConj [IsCMExtension K L] : L ‚âÉ‚Çê[K] L :=
  (exists_isConj K (Classical.choice (inferInstance : Nonempty _))).choose

def ringOfIntegersComplexConj [IsCMExtension K L] : (ùìû L) ‚âÉ‚Çê[ùìû K] (ùìû L) :=
  RingOfIntegers.mapAlgEquiv (complexConj K)

@[simp]
theorem coe_ringOfIntegersComplexConj [IsCMExtension K L] (x : ùìû L) :
    (ringOfIntegersComplexConj K x : L) = complexConj K (x : L) := rfl

def unitsComplexConj [IsCMExtension K L] : (ùìû L)À£ ‚âÉ* (ùìû L)À£ :=
  Units.mapEquiv (ringOfIntegersComplexConj K).toMulEquiv

@[simp]
theorem coe_unitsComplexConj [IsCMExtension K L] (x : (ùìû L)À£) :
    (unitsComplexConj K x : ùìû L) = ringOfIntegersComplexConj K (x : ùìû L) := rfl

theorem isConj_complexConj [IsCMExtension K L] (œÜ : L ‚Üí+* ‚ÑÇ) :
    IsConj œÜ (complexConj K) := by
  obtain ‚ü®œÉ, hœÉ‚ü© := exists_isConj K œÜ
  have := (exists_isConj K (Classical.choice (inferInstance : Nonempty (L ‚Üí+* ‚ÑÇ)))).choose_spec
  rwa [isConj_eq_isConj hœÉ this] at hœÉ

theorem complexConj_ne_one [IsCMExtension K L] :
    complexConj K ‚â† (1 : L ‚âÉ‚Çê[K] L) :=
  isConj_ne_one (exists_isConj K (Classical.choice (inferInstance : Nonempty _))).choose_spec

@[simp]
theorem complexEmbedding_complexConj [IsCMExtension K L] (œÜ : L ‚Üí+* ‚ÑÇ) (x : L) :
    œÜ (complexConj K x) = conj (œÜ x) := by
  rw [IsConj.eq (isConj_complexConj K œÜ), RCLike.star_def]

protected theorem Units.complexEmbedding_complexConj [IsCMExtension K L] (œÜ : L ‚Üí+* ‚ÑÇ)
    (u : (ùìû L)À£) :
    Units.complexEmbedding œÜ (unitsComplexConj K u) =
      (Units.map (starRingEnd ‚ÑÇ)) (Units.complexEmbedding œÜ u) := by
  simp [Units.ext_iff]

@[simp]
theorem unitsComplexConj_torsion [IsCMExtension K L] (Œ∂ : torsion L) :
    unitsComplexConj K (Œ∂ : (ùìû L)À£) = Œ∂‚Åª¬π := by
  let œÜ : L ‚Üí+* ‚ÑÇ := Classical.choice (inferInstance : Nonempty _)
  rw [‚Üê (Units.complexEmbedding_injective œÜ).eq_iff, Units.complexEmbedding_complexConj,
    Units.ext_iff, Units.coe_map, MonoidHom.coe_coe, Subgroup.coe_inv, MonoidHom.map_inv,
    Complex.conj_rootsOfUnity (n := torsionOrder L)]
  rw [‚Üê map_complexEmbedding_torsion]
  exact Subgroup.apply_coe_mem_map _ (torsion L) Œ∂

@[simp]
theorem infinitePlace_complexConj [IsCMExtension K L] (w : InfinitePlace L) (x : L) :
    w (complexConj K x) = w x := by
  rw [‚Üê norm_embedding_eq, complexEmbedding_complexConj, Complex.norm_conj, norm_embedding_eq]

@[simp]
theorem complexConj_apply_apply [IsCMExtension K L] (x : L) :
    complexConj K (complexConj K x) = x := by
  let œÜ : L ‚Üí+* ‚ÑÇ := Classical.choice (inferInstance : Nonempty _)
  rw [‚Üê œÜ.injective.eq_iff, complexEmbedding_complexConj, complexEmbedding_complexConj,
    Complex.conj_conj]

theorem galoisGroup_eq [hcm : IsCMExtension K L] :
    (‚ä§ : Subgroup (L ‚âÉ‚Çê[K] L)).carrier = {1, complexConj K} := by
  classical
  refine (Set.eq_of_subset_of_card_le ?_ ?_).symm
  ¬∑ intro x
    simp
  ¬∑ rw [Fintype.card_subtype]
    simp_rw [Subgroup.mem_carrier]
    simp only [Subgroup.mem_top, Finset.filter_True, Finset.card_univ, Fintype.card_ofFinset,
      Set.toFinset_singleton]
    rw [IsGalois.card_aut_eq_finrank, hcm.quadratic]
    refine le_of_eq ?_
    rw [eq_comm]
    refine Finset.card_pair ?_
    exact (complexConj_ne_one K).symm

theorem complexConj_eq_self_iff [IsCMExtension K L] (x : L) :
    complexConj K x = x ‚Üî x ‚àà (algebraMap K L).range := by
  convert (IntermediateField.mem_fixedField_iff (‚ä§ : Subgroup (L ‚âÉ‚Çê[K] L)) x).symm using 1
  ¬∑ simp only [‚Üê Subgroup.mem_carrier, galoisGroup_eq, Set.mem_insert_iff, Set.mem_singleton_iff,
      forall_eq_or_imp, AlgEquiv.one_apply, forall_eq, true_and]
  ¬∑ rw [IntermediateField.fixedField_top, IntermediateField.mem_bot, RingHom.mem_range,
      Set.mem_range]

theorem ringOfIntegersComplexConj_eq_self_iff [IsCMExtension K L] (x : ùìû L) :
    ringOfIntegersComplexConj K x = x ‚Üî x ‚àà (algebraMap (ùìû K) (ùìû L)).range := by
  rw [‚Üê RingOfIntegers.eq_iff, coe_ringOfIntegersComplexConj, complexConj_eq_self_iff,
    RingOfIntegers.coe_eq_algebraMap, RingHom.mem_range, RingHom.mem_range]
  refine ‚ü®fun ‚ü®a, ha‚ü© ‚Ü¶ ‚ü®‚ü®a, ?_‚ü©, RingOfIntegers.eq_iff.mp ha‚ü©, ?_‚ü©
  ¬∑ exact (isIntegral_algebraMap_iff
        (FaithfulSMul.algebraMap_injective K L)).mp (ha ‚ñ∏ RingOfIntegers.isIntegral_coe x)
  ¬∑ rintro ‚ü®a, rfl‚ü©
    exact ‚ü®a, rfl‚ü©

variable (L) in
def realUnits : Subgroup (ùìû L)À£ := (Units.map (algebraMap (ùìû K) (ùìû L)).toMonoidHom).range

theorem unitsComplexConj_eq_self_iff [IsCMExtension K L] (u : (ùìû L)À£) :
    unitsComplexConj K u = u ‚Üî u ‚àà realUnits K L := by
  rw [‚Üê Units.eq_iff, coe_unitsComplexConj, ringOfIntegersComplexConj_eq_self_iff, realUnits,
    RingHom.mem_range, RingHom.toMonoidHom_eq_coe, MonoidHom.mem_range]
  refine ‚ü®fun ‚ü®x, hx‚ü© ‚Ü¶
    ‚ü®(isUnit_iff_isUnit_algebraMap.mpr (hx ‚ñ∏ u.isUnit)).unit, Units.ext_iff.mpr hx‚ü©, ?_‚ü©
  rintro ‚ü®x, rfl‚ü©
  exact ‚ü®x, rfl‚ü©

variable (L) in
def index_realUnits : ‚Ñï := (realUnits K L ‚äî torsion L).index

def unitsMulComplexConjInv [IsCMExtension K L] : (ùìû L)À£ ‚Üí* torsion L where
  toFun := fun u ‚Ü¶ ‚ü®u * (unitsComplexConj K u)‚Åª¬π, (mem_torsion L).mpr fun _ ‚Ü¶ by simp‚ü©
  map_one' := by simp
  map_mul' := by
    intro x y
    simp only [map_mul, mul_inv_rev, MulMemClass.mk_mul_mk, Subtype.mk.injEq]
    rw [mul_comm ((unitsComplexConj K) y)‚Åª¬π, mul_mul_mul_comm]

@[simp]
theorem unitsMulComplexConjInv_apply [IsCMExtension K L] (u : (ùìû L)À£) :
    unitsMulComplexConjInv K u = u * (unitsComplexConj K u)‚Åª¬π := rfl

theorem unitsMulComplexConjInv_ker [IsCMExtension K L] :
    (unitsMulComplexConjInv K).ker = realUnits K L := by
  ext
  rw [MonoidHom.mem_ker, Subtype.ext_iff_val, unitsMulComplexConjInv_apply, OneMemClass.coe_one,
    mul_inv_eq_one, eq_comm, unitsComplexConj_eq_self_iff]

theorem index_unitsMulComplexConjInv_range [IsCMExtension K L] :
    (unitsMulComplexConjInv K (L := L)).range.index ‚à£ 2 := by
  let H := (‚ä§ : Subgroup (torsion L)).map (powMonoidHom 2)
  have : H.index = 2 := by
    unfold H
    rw [Subgroup.index_map]
    simp

    sorry
  rw [‚Üê this]
  apply Subgroup.index_dvd_of_le
  unfold H
  rintro _ ‚ü®Œ∂, _, rfl‚ü©
  refine ‚ü®Œ∂, ?_‚ü©
  rw [Subtype.ext_iff_val]
  simp [pow_two]











theorem index_realUnits_eq [IsCMExtension K L] :
    index_realUnits K L = 1 ‚à® index_realUnits K L = 2 := by
  let œÜ : (ùìû L)À£ ‚Üí* sorry







end IsCMExtension
