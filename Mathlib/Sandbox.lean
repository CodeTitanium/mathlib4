import Mathlib.NumberTheory.NumberField.Units.Basic
import Mathlib.RingTheory.RootsOfUnity.Complex

set_option linter.style.header false

section misc

open Polynomial

theorem Polynomial.splits_of_degree_two {K L : Type*} [Field K] [Field L] (i : K ‚Üí+* L)
    {f : Polynomial K} (hf‚ÇÅ : f.natDegree = 2) (hf‚ÇÇ : ‚àÉ x : L, eval‚ÇÇ i x f = 0) :
    Splits i f := by
  have hf‚ÇÄ : f ‚â† 0 := ne_zero_of_natDegree_gt (hf‚ÇÅ ‚ñ∏ zero_lt_two)
  obtain ‚ü®x, hx‚ü© := hf‚ÇÇ
  rw [‚Üê mem_roots_map_of_injective i.injective hf‚ÇÄ, mem_roots'] at hx
  have h : (map i f /‚Çò (X - C x)).natDegree = 1 := by
    rw [natDegree_divByMonic _ (monic_X_sub_C x), natDegree_map, hf‚ÇÅ, natDegree_X_sub_C]
  rw [‚Üê splits_id_iff_splits, ‚Üê mul_divByMonic_eq_iff_isRoot.mpr hx.2]
  exact (splits_mul_iff _ (X_sub_C_ne_zero x) (by simp [ne_zero_of_natDegree_gt, h])).mpr
    ‚ü®splits_X_sub_C  _, splits_of_natDegree_le_one (RingHom.id L) (by rw [h])‚ü©

theorem normal_of_rank_eq_two (F K : Type*) [Field F] [Field K] [Algebra F K]
    (h : Module.finrank F K = 2) :
    Normal F K :=
{ isAlgebraic := by
    have : Module.Finite F K := Module.finite_of_finrank_eq_succ h
    exact fun x ‚Ü¶ Algebra.IsAlgebraic.isAlgebraic x
  splits' := by
    have : FiniteDimensional F K := Module.finite_of_finrank_eq_succ h
    intro x
    obtain h | h := le_iff_lt_or_eq.mp (h ‚ñ∏ minpoly.natDegree_le x)
    ¬∑ exact Polynomial.splits_of_natDegree_le_one _ (by rwa [Nat.le_iff_lt_add_one])
    ¬∑ exact Polynomial.splits_of_degree_two _ h ‚ü®x, minpoly.aeval F x‚ü© }

theorem IntermediateField.fixedField_top {F : Type*} [Field F] {E : Type*} [Field E] [Algebra F E]
    [FiniteDimensional F E] [IsGalois F E] :
    fixedField (‚ä§ : Subgroup (E ‚âÉ‚Çê[F] E)) = ‚ä• :=
  IsGalois.intermediateFieldEquivSubgroup.symm.map_bot

theorem IntermediateField.fixedField_bot {F : Type*} [Field F] {E : Type*} [Field E] [Algebra F E]
    [FiniteDimensional F E] [IsGalois F E] :
    fixedField (‚ä• : Subgroup (E ‚âÉ‚Çê[F] E)) = ‚ä§ :=
  IsGalois.intermediateFieldEquivSubgroup.symm.map_top

theorem Complex.conj_rootsOfUnity {Œ∂ : ‚ÑÇÀ£} {n : ‚Ñï} [NeZero n] (hŒ∂ : Œ∂ ‚àà rootsOfUnity n ‚ÑÇ) :
    (starRingEnd ‚ÑÇ) Œ∂ = Œ∂‚Åª¬π := by
  rw [‚Üê Units.mul_eq_one_iff_eq_inv, conj_mul', norm_eq_one_of_mem_rootsOfUnity hŒ∂, ofReal_one,
    one_pow]

@[to_additive]
theorem Subgroup.index_range {G : Type*} [Group G] {f : G ‚Üí* G} [hf : f.ker.FiniteIndex] :
    f.range.index = Nat.card f.ker := by
  suffices f.range.index * f.ker.index = Nat.card f.ker * f.ker.index by
    simpa [mul_eq_mul_right_iff, hf.finiteIndex, or_false] using this
  rw [card_mul_index f.ker, index_ker, mul_comm, card_mul_index]

@[to_additive]
theorem IsCyclic.card_powMonoidHom_range {G : Type*} [CommGroup G] [hG : IsCyclic G] [Fintype G]
    (d : ‚Ñï) :
    Nat.card (powMonoidHom d : G ‚Üí* G).range = Fintype.card G / (Fintype.card G).gcd d := by
  obtain ‚ü®g, h‚ü© := exists_zpow_surjective G
  have : (powMonoidHom d).range = Subgroup.zpowers (g ^ d) := by
    rw [show g ^ d = powMonoidHom d g by rfl, ‚Üê MonoidHom.map_zpowers,
      (Subgroup.eq_top_iff' (Subgroup.zpowers g)).mpr h,  ‚Üê MonoidHom.range_eq_map]
  rw [this, Nat.card_zpowers, orderOf_pow, orderOf_eq_card_of_forall_mem_zpowers h,
    Nat.card_eq_fintype_card]

@[to_additive]
theorem IsCyclic.index_powMonoidHom_ker {G : Type*} [CommGroup G] [hG : IsCyclic G] [Fintype G]
    (d : ‚Ñï) :
    (powMonoidHom d : G ‚Üí* G).ker.index = Fintype.card G / (Fintype.card G).gcd d := by
  rw [Subgroup.index_ker, card_powMonoidHom_range]

@[to_additive]
theorem IsCyclic.card_powMonoidHom_ker {G : Type*} [CommGroup G] [hG : IsCyclic G] [Fintype G]
    (d : ‚Ñï) :
    Nat.card (powMonoidHom d : G ‚Üí* G).ker = (Fintype.card G).gcd d := by
  have h : ‚Üë(Fintype.card G / (Fintype.card G).gcd d) ‚â† (0 : ‚Ñö) :=
    Nat.cast_ne_zero.mpr <| Nat.div_ne_zero_iff.mpr
      ‚ü®Nat.gcd_ne_zero_left Fintype.card_ne_zero, Nat.gcd_le_left d Fintype.card_pos‚ü©
  have := Subgroup.card_mul_index (powMonoidHom d : G ‚Üí* G).ker
  rwa [index_powMonoidHom_ker, Nat.card_eq_fintype_card (Œ± := G), ‚Üê Nat.cast_inj (R := ‚Ñö),
    Nat.cast_mul, ‚Üê eq_div_iff h, ‚Üê Nat.cast_div (Nat.div_dvd_of_dvd (Nat.gcd_dvd_left _ _)) h,
    Nat.div_div_self (Nat.gcd_dvd_left _ _) Fintype.card_ne_zero, Nat.cast_inj] at this

@[to_additive]
theorem IsCyclic.index_powMonoidHom_range {G : Type*} [CommGroup G] [hG : IsCyclic G] [Fintype G]
    (d : ‚Ñï) :
    (powMonoidHom d : G ‚Üí* G).range.index = (Fintype.card G).gcd d := by
  rw [Subgroup.index_range, card_powMonoidHom_ker]

end misc

noncomputable section

open NumberField InfinitePlace ComplexEmbedding NumberField.Units

class IsCM (F K : Type*) [Field F] [NumberField F] [Field K] [NumberField K]
    [Algebra F K] : Prop where
  isTotallyComplex : IsTotallyComplex K
  isTotallyReal : IsTotallyReal F
  quadratic : Module.finrank F K = 2

namespace IsCM

open scoped ComplexConjugate

variable (F K : Type*) [Field F] [NumberField F] [Field K] [NumberField K] [Algebra F K]

instance [IsCM F K] : IsGalois F K :=
{ to_isSeparable := Algebra.IsSeparable.of_integral _ _
  to_normal := normal_of_rank_eq_two _ _ quadratic }

variable {K}

variable [hcm : IsCM F K]

theorem exists_isConj (œÜ : K ‚Üí+* ‚ÑÇ) :
    ‚àÉ œÉ : K ‚âÉ‚Çê[F] K, IsConj œÜ œÉ :=
  exists_isConj_of_not_isUnramified <|
    not_isUnramified_iff.mpr ‚ü®hcm.isTotallyComplex.isComplex _, hcm.isTotallyReal.isReal _‚ü©

variable {F} in
theorem isConj_ne_one {œÜ : K ‚Üí+* ‚ÑÇ} {œÉ : K ‚âÉ‚Çê[F] K} (hœÜ : IsConj œÜ œÉ) :
    œÉ ‚â† 1 := by
  by_contra h
  rw [h, isConj_one_iff, ‚Üê isReal_mk_iff] at hœÜ
  exact not_isComplex_iff_isReal.mpr hœÜ  (hcm.isTotallyComplex.isComplex _)

variable {F} in
theorem isConj_eq_isConj {œÜ œà : K ‚Üí+* ‚ÑÇ} {œÉ œÑ : K ‚âÉ‚Çê[F] K}
    (hœÜ : IsConj œÜ œÉ) (hœà : IsConj œà œÑ) : œÉ = œÑ := by
  have : Fintype.card (K ‚âÉ‚Çê[F] K) = 2 := hcm.quadratic ‚ñ∏ IsGalois.card_aut_eq_finrank F K
  rw [‚Üê Nat.card_eq_fintype_card, Nat.card_eq_two_iff' 1] at this
  exact ExistsUnique.unique this (isConj_ne_one hœÜ) (isConj_ne_one hœà)

def complexConj : K ‚âÉ‚Çê[F] K :=
  (exists_isConj F (Classical.choice (inferInstance : Nonempty _))).choose

def ringOfIntegersComplexConj : (ùìû K) ‚âÉ‚Çê[ùìû F] (ùìû K) :=
  RingOfIntegers.mapAlgEquiv (complexConj F)

@[simp]
theorem coe_ringOfIntegersComplexConj (x : ùìû K) :
    (ringOfIntegersComplexConj F x : K) = complexConj F (x : K) := rfl

def unitsComplexConj : (ùìû K)À£ ‚âÉ* (ùìû K)À£ :=
  Units.mapEquiv (ringOfIntegersComplexConj F).toMulEquiv

@[simp]
theorem coe_unitsComplexConj (x : (ùìû K)À£) :
    (unitsComplexConj F x : ùìû K) = ringOfIntegersComplexConj F (x : ùìû K) := rfl

theorem isConj_complexConj (œÜ : K ‚Üí+* ‚ÑÇ) :
    IsConj œÜ (complexConj F) := by
  obtain ‚ü®œÉ, hœÉ‚ü© := exists_isConj F œÜ
  have := (exists_isConj F (Classical.choice (inferInstance : Nonempty (K ‚Üí+* ‚ÑÇ)))).choose_spec
  rwa [isConj_eq_isConj hœÉ this] at hœÉ

theorem complexConj_ne_one :
    complexConj F ‚â† (1 : K ‚âÉ‚Çê[F] K) :=
  isConj_ne_one (exists_isConj F (Classical.choice (inferInstance : Nonempty _))).choose_spec

@[simp]
theorem complexEmbedding_complexConj (œÜ : K ‚Üí+* ‚ÑÇ) (x : K) :
    œÜ (complexConj F x) = conj (œÜ x) := by
  rw [IsConj.eq (isConj_complexConj F œÜ), RCLike.star_def]

protected theorem Units.complexEmbedding_complexConj (œÜ : K ‚Üí+* ‚ÑÇ) (u : (ùìû K)À£) :
    Units.complexEmbedding œÜ (unitsComplexConj F u) =
      (Units.map (starRingEnd ‚ÑÇ)) (Units.complexEmbedding œÜ u) := by
  simp [Units.ext_iff]

@[simp]
theorem unitsComplexConj_torsion (Œ∂ : torsion K) :
    unitsComplexConj F (Œ∂ : (ùìû K)À£) = Œ∂‚Åª¬π := by
  let œÜ : K ‚Üí+* ‚ÑÇ := Classical.choice (inferInstance : Nonempty _)
  rw [‚Üê (Units.complexEmbedding_injective œÜ).eq_iff, Units.complexEmbedding_complexConj,
    Units.ext_iff, Units.coe_map, MonoidHom.coe_coe, Subgroup.coe_inv, MonoidHom.map_inv,
    Complex.conj_rootsOfUnity (n := torsionOrder K)]
  rw [‚Üê map_complexEmbedding_torsion]
  exact Subgroup.apply_coe_mem_map _ (torsion K) Œ∂

@[simp]
theorem infinitePlace_complexConj (w : InfinitePlace K) (x : K) :
    w (complexConj F x) = w x := by
  rw [‚Üê norm_embedding_eq, complexEmbedding_complexConj, Complex.norm_conj, norm_embedding_eq]

@[simp]
theorem complexConj_apply_apply (x : K) :
    complexConj F (complexConj F x) = x := by
  let œÜ : K ‚Üí+* ‚ÑÇ := Classical.choice (inferInstance : Nonempty _)
  rw [‚Üê œÜ.injective.eq_iff, complexEmbedding_complexConj, complexEmbedding_complexConj,
    Complex.conj_conj]

theorem galoisGroup_eq : -- Refactor this lemma
    (‚ä§ : Subgroup (K ‚âÉ‚Çê[F] K)).carrier = {1, complexConj F} := by
  classical
  refine (Set.eq_of_subset_of_card_le ?_ ?_).symm
  ¬∑ intro x
    simp
  ¬∑ rw [Fintype.card_subtype]
    simp_rw [Subgroup.mem_carrier]
    simp only [Subgroup.mem_top, Finset.filter_True, Finset.card_univ, Fintype.card_ofFinset,
      Set.toFinset_singleton]
    rw [IsGalois.card_aut_eq_finrank, hcm.quadratic]
    refine le_of_eq ?_
    rw [eq_comm]
    refine Finset.card_pair ?_
    exact (complexConj_ne_one F).symm

theorem complexConj_eq_self_iff (x : K) :
    complexConj F x = x ‚Üî x ‚àà (algebraMap F K).range := by
  convert (IntermediateField.mem_fixedField_iff (‚ä§ : Subgroup (K ‚âÉ‚Çê[F] K)) x).symm using 1
  ¬∑ simp only [‚Üê Subgroup.mem_carrier, galoisGroup_eq, Set.mem_insert_iff, Set.mem_singleton_iff,
      forall_eq_or_imp, AlgEquiv.one_apply, forall_eq, true_and]
  ¬∑ rw [IntermediateField.fixedField_top, IntermediateField.mem_bot, RingHom.mem_range,
      Set.mem_range]

theorem ringOfIntegersComplexConj_eq_self_iff (x : ùìû K) :
    ringOfIntegersComplexConj F x = x ‚Üî x ‚àà (algebraMap (ùìû F) (ùìû K)).range := by
  rw [‚Üê RingOfIntegers.eq_iff, coe_ringOfIntegersComplexConj, complexConj_eq_self_iff,
    RingOfIntegers.coe_eq_algebraMap, RingHom.mem_range, RingHom.mem_range]
  refine ‚ü®fun ‚ü®a, ha‚ü© ‚Ü¶ ‚ü®‚ü®a, ?_‚ü©, RingOfIntegers.eq_iff.mp ha‚ü©, ?_‚ü©
  ¬∑ exact (isIntegral_algebraMap_iff
        (FaithfulSMul.algebraMap_injective F K)).mp (ha ‚ñ∏ RingOfIntegers.isIntegral_coe x)
  ¬∑ rintro ‚ü®a, rfl‚ü©
    exact ‚ü®a, rfl‚ü©

variable (K) in
def realUnits : Subgroup (ùìû K)À£ := (Units.map (algebraMap (ùìû F) (ùìû K)).toMonoidHom).range

theorem unitsComplexConj_eq_self_iff (u : (ùìû K)À£) :
    unitsComplexConj F u = u ‚Üî u ‚àà realUnits F K := by
  rw [‚Üê Units.eq_iff, coe_unitsComplexConj, ringOfIntegersComplexConj_eq_self_iff, realUnits,
    RingHom.mem_range, RingHom.toMonoidHom_eq_coe, MonoidHom.mem_range]
  refine ‚ü®fun ‚ü®x, hx‚ü© ‚Ü¶
    ‚ü®(isUnit_iff_isUnit_algebraMap.mpr (hx ‚ñ∏ u.isUnit)).unit, Units.ext_iff.mpr hx‚ü©, ?_‚ü©
  rintro ‚ü®x, rfl‚ü©
  exact ‚ü®x, rfl‚ü©

variable (K) in
abbrev index_realUnits : ‚Ñï := (torsion K ‚äî realUnits F K).index

def unitsMulComplexConjInv : (ùìû K)À£ ‚Üí* torsion K where
  toFun := fun u ‚Ü¶ ‚ü®u * (unitsComplexConj F u)‚Åª¬π, (mem_torsion K).mpr fun _ ‚Ü¶ by simp‚ü©
  map_one' := by simp
  map_mul' x y := by
    simp only [map_mul, mul_inv_rev, MulMemClass.mk_mul_mk, Subtype.mk.injEq]
    rw [mul_comm ((unitsComplexConj F) y)‚Åª¬π, mul_mul_mul_comm]

@[simp]
theorem unitsMulComplexConjInv_apply (u : (ùìû K)À£) :
    unitsMulComplexConjInv F u = u * (unitsComplexConj F u)‚Åª¬π := rfl

theorem unitsMulComplexConjInv_apply_torsion (Œ∂ : torsion K) :
    unitsMulComplexConjInv F Œ∂ = Œ∂ ^ 2 := by
  refine Subtype.eq ?_
  simp [pow_two]

variable (K) in
theorem unitsMulComplexConjInv_ker :
    (unitsMulComplexConjInv F).ker = realUnits F K := by
  ext
  rw [MonoidHom.mem_ker, Subtype.ext_iff_val, unitsMulComplexConjInv_apply, OneMemClass.coe_one,
    mul_inv_eq_one, eq_comm, unitsComplexConj_eq_self_iff]

variable (K) in
theorem index_unitsMulComplexConjInv_range :
    (unitsMulComplexConjInv F (K := K)).range.index ‚à£ 2 := by
  have : (powMonoidHom 2 : _ ‚Üí* torsion K).range.index = 2 := by
    rw [IsCyclic.index_powMonoidHom_range, ‚Üê Nat.gcd_eq_right_iff_dvd]
    exact Even.two_dvd <| even_torsionOrder K
  rw [‚Üê this]
  refine Subgroup.index_dvd_of_le ?_
  rintro _ ‚ü®Œ∂, _, rfl‚ü©
  refine ‚ü®Œ∂, ?_‚ü©
  rw [Subtype.ext_iff_val]
  simp [pow_two]

variable (K) in
theorem map_unitsMulComplexConjInv_torsion :
    Subgroup.map (unitsMulComplexConjInv F) (torsion K) = (powMonoidHom 2).range := by
  ext
  constructor
  ¬∑ rintro ‚ü®u, hu, rfl‚ü©
    refine ‚ü®‚ü®u, hu‚ü©, ?_‚ü©
    rw [powMonoidHom_apply, ‚Üê unitsMulComplexConjInv_apply_torsion F]
  ¬∑ rintro ‚ü®Œ∑, rfl‚ü©
    refine ‚ü®Œ∑, Œ∑.prop, ?_‚ü©
    rw [unitsMulComplexConjInv_apply_torsion, powMonoidHom_apply]

variable (K) in
theorem index_realUnits_mul_eq :
    index_realUnits F K * (unitsMulComplexConjInv F : (ùìû K)À£ ‚Üí* torsion K).range.index = 2 := by
  convert (Subgroup.index_map (torsion K) (unitsMulComplexConjInv F : (ùìû K)À£ ‚Üí* torsion K)).symm
  ¬∑ rw [unitsMulComplexConjInv_ker]
  ¬∑ rw [map_unitsMulComplexConjInv_torsion, IsCyclic.index_powMonoidHom_range, Nat.gcd_eq_right]
    exact even_iff_two_dvd.mp (even_torsionOrder K)

variable (K) in
theorem index_realUnits_eq :
    index_realUnits F K = 1 ‚à® index_realUnits F K = 2 := by
  have h‚ÇÅ := index_realUnits_mul_eq F K
  obtain h‚ÇÇ | h‚ÇÇ := (Nat.dvd_prime Nat.prime_two).mp <| index_unitsMulComplexConjInv_range F K
  ¬∑ exact Or.inr <| by rwa [h‚ÇÇ, mul_one] at h‚ÇÅ
  ¬∑ exact Or.inl <| by rwa [h‚ÇÇ, Nat.mul_left_eq_self_iff zero_lt_two] at h‚ÇÅ

variable (K) in
theorem index_realUnits_eq_two_iff :
    index_realUnits F K = 2 ‚Üî
      ‚àÉ u : (ùìû K)À£, Subgroup.zpowers (unitsMulComplexConjInv F u) = ‚ä§ := by
  have : (‚àÉ u : (ùìû K)À£, Subgroup.zpowers (unitsMulComplexConjInv F u) = ‚ä§) ‚Üî
      (unitsMulComplexConjInv F : _ ‚Üí* torsion K).range.index = 1 := by
    constructor
    ¬∑ intro ‚ü®u, hu‚ü©
      refine Subgroup.index_eq_one.mpr ?_
      rw [‚Üê MonoidHom.map_zpowers] at hu
      have := Subgroup.map_le_range (unitsMulComplexConjInv F) (Subgroup.zpowers u)
      rw [hu] at this
      exact top_le_iff.mp this
    ¬∑ intro h
      rw [Subgroup.index_eq_one, MonoidHom.range_eq_top] at h
      obtain ‚ü®Œ∂, hŒ∂‚ü© := exists_zpow_surjective (torsion K)
      obtain ‚ü®u, rfl‚ü© := h Œ∂
      refine ‚ü®u, ?_‚ü©
      rw [‚Üê MonoidHom.map_zpowers]
      refine (Subgroup.eq_top_iff' _).mpr fun Œ∑ ‚Ü¶ ?_
      simp_rw [Subgroup.mem_map, Subgroup.exists_mem_zpowers, map_zpow]
      exact hŒ∂ Œ∑
  rw [this]
  have := index_realUnits_mul_eq F K
  constructor
  ¬∑ intro h
    rwa [h, Nat.mul_right_eq_self_iff zero_lt_two] at this
  ¬∑ intro h
    rwa [h, mul_one] at this


end IsCM
