/-
Copyright (c) 2025 Chris Birkbeck. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Birkbeck
-/
import Mathlib.Analysis.Asymptotics.Lemmas
import Mathlib.Topology.Algebra.UniformConvergence
import Mathlib.Topology.Sets.Compacts
import Mathlib.Analysis.Calculus.UniformLimitsDeriv
import Mathlib.Analysis.Complex.LocallyUniformLimit

/-!
# Infinite sum and products that converge uniformly on a set

This file defines the notion of uniform convergence of infinite sums and products of functions
on a family of sets of `Œ≤`.
It also defines the notion of local uniform convergence of infinite sums and products of functions
on a set.

-/

noncomputable section

open Filter Function

open scoped Topology

variable {Œ± Œ≤ Œπ : Type*}

section HasProdUniformlyOn

variable [CommMonoid Œ±] {ùîñ : Set (Set Œ≤)}

@[to_additive, simp]
lemma UniformOnFun.ofFun_prod (f : Œπ ‚Üí Œ≤ ‚Üí Œ±) (i : Finset Œπ) :
    ‚àè b ‚àà i, (UniformOnFun.ofFun ùîñ) (f b) = (UniformOnFun.ofFun ùîñ) (‚àè b ‚àà i, f b) := rfl

variable  {f : Œπ ‚Üí Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±}

variable [UniformSpace Œ±]

/-- `HasProdUniformlyOn f g ùîñ` means that the (potentially infinite) product `‚àè' i, f i b`
for `b : Œ≤` converges uniformly on `s ‚àà ùîñ` to `g`. -/
@[to_additive "`HasSumUniformlyOn f g ùîñ` means that the (potentially infinite) sum `‚àë' i, f i b`
for `b : Œ≤` converges uniformly on `s ‚àà ùîñ` to `g`."]
def HasProdUniformlyOn (f : Œπ ‚Üí Œ≤ ‚Üí Œ±) (g : Œ≤ ‚Üí Œ±) (ùîñ : Set (Set Œ≤)) : Prop :=
  HasProd (fun i ‚Ü¶ UniformOnFun.ofFun ùîñ (f i)) (UniformOnFun.ofFun ùîñ g)

/-- `HasProdLocallyUniformlyOn f g` means that the (potentially infinite) product
the `‚àè' i, f i b` for `b : Œ≤` converges locally uniformly on `s` to `g b`. -/
@[to_additive "`HasProdLocallyUniformlyOn f g` means that the (potentially infinite) sum
the `‚àë' i, f i b` for `b : Œ≤` converges locally uniformly on `s` to `g b`."]
def HasProdLocallyUniformlyOn (f : Œπ ‚Üí Œ≤ ‚Üí Œ±) (g : Œ≤ ‚Üí Œ±) (s : Set Œ≤) [TopologicalSpace Œ≤] : Prop :=
  ‚àÄ x ‚àà s, ‚àÉ t ‚àà ùìù[s] x, HasProdUniformlyOn f g {t}

/-- `MultipliableUniformlyOn f ùîñ` means that `f` converges uniformly on `s` to some infinite
product. -/
@[to_additive "`SummableUniformlyOn f s` means that `f` converges uniformly on `s` to some
infinite sum."]
def MultipliableUniformlyOn (f : Œπ ‚Üí Œ≤ ‚Üí Œ±) (ùîñ : Set (Set Œ≤)) : Prop :=
  ‚àÉ g, HasProdUniformlyOn f g ùîñ

/-- `MultipliableLocallyUniformlyOn f s` means that `f` converges locally uniformly on `s` to some
infinite product. -/
@[to_additive "`SummableUniformlyOn f s` means that `f` converges locally uniformly on `s` to some
infinite sum. "]
def MultipliableLocallyUniformlyOn (f : Œπ ‚Üí Œ≤ ‚Üí Œ±) (s : Set Œ≤) [TopologicalSpace Œ≤] : Prop :=
  ‚àÉ g, HasProdLocallyUniformlyOn f g s

@[to_additive]
theorem HasProdUniformlyOn.multipliable (h : HasProdUniformlyOn f g ùîñ) :
    Multipliable (fun i ‚Ü¶ UniformOnFun.ofFun ùîñ (f i)) :=
  ‚ü®(UniformOnFun.ofFun ùîñ g), h‚ü©

@[to_additive]
theorem HasProdUniformlyOn.multipliableUniformlyOn (h : HasProdUniformlyOn f g ùîñ) :
    MultipliableUniformlyOn f ùîñ := ‚ü®g, h‚ü©

@[to_additive]
theorem HasProdLocallyUniformlyOn.multipliableLocallyUniformlyOn [TopologicalSpace Œ≤] (s : Set Œ≤)
    (h : HasProdLocallyUniformlyOn f g s) : MultipliableLocallyUniformlyOn f s := ‚ü®g, h‚ü©

@[to_additive]
lemma hasProdUniformlyOn_iff_tendstoUniformlyOn  : HasProdUniformlyOn f g ùîñ ‚Üî
    ‚àÄ s ‚àà ùîñ, TendstoUniformlyOn (fun (s : Finset Œπ) b ‚Ü¶ ‚àè i ‚àà s, f i b) g atTop s := by
  rw [HasProdUniformlyOn, HasProd] at *
  have H := UniformOnFun.tendsto_iff_tendstoUniformlyOn
    (F := (fun s_1 ‚Ü¶ ‚àè b ‚àà s_1, (UniformOnFun.ofFun ùîñ) (f b)))
    (f:= (UniformOnFun.ofFun ùîñ g)) (p := atTop)
  simp only [Set.mem_singleton_iff, UniformOnFun.toFun_ofFun, forall_eq] at H
  convert H
  simp

@[to_additive]
theorem HasProdUniformlyOn.tprod_eqOn [T2Space Œ±]
  (h : HasProdUniformlyOn f g ùîñ) : ‚àÄ s ‚àà ùîñ, Set.EqOn (fun x ‚Ü¶ ‚àè' b, f b x) g s := by
  intro s hs x hx
  rw [hasProdUniformlyOn_iff_tendstoUniformlyOn] at h
  apply HasProd.tprod_eq
  apply (h s hs).tendsto_at hx

@[to_additive]
theorem HasProdUniformlyOn.pointwise_multipliable
  (h : HasProdUniformlyOn f g ùîñ) : ‚àÄ s ‚àà ùîñ, ‚àÄ x ‚àà s, Multipliable (fun i ‚Ü¶ f i x) := by
  intro s hs x hx
  rw [hasProdUniformlyOn_iff_tendstoUniformlyOn] at h
  apply HasProd.multipliable (a := g x)
  exact (h s hs).tendsto_at hx

@[to_additive]
theorem MultipliableUniformlyOn.pointwise_multipliable
  (h : MultipliableUniformlyOn f ùîñ) : ‚àÄ s ‚àà ùîñ, ‚àÄ x ‚àà s, Multipliable (fun i ‚Ü¶ f i x) := by
  obtain ‚ü®g, hg‚ü© := h
  apply hg.pointwise_multipliable

@[to_additive]
lemma HasProdLocallyUniformlyOn.tendstoLocallyUniformlyOn [TopologicalSpace Œ≤] (s : Set Œ≤)
   (h : HasProdLocallyUniformlyOn f g s) :
   TendstoLocallyUniformlyOn (fun (v : Finset Œπ) b ‚Ü¶ ‚àè i ‚àà v, f i b) g atTop s := by
  simp_rw [HasProdLocallyUniformlyOn, HasProdUniformlyOn, HasProd,
    tendstoLocallyUniformlyOn_iff_forall_tendsto] at *
  intro x hx
  obtain ‚ü®t, ht, htr‚ü© := h x hx
  have H := UniformOnFun.tendsto_iff_tendstoUniformlyOn
        (F := (fun s_1 ‚Ü¶ ‚àè b ‚àà s_1, (UniformOnFun.ofFun {t}) (f b)))
          (f:= (UniformOnFun.ofFun {t} g)) (p := atTop)
  simp only [UniformOnFun.ofFun_prod, Set.mem_singleton_iff, UniformOnFun.toFun_ofFun,
    forall_eq] at *
  rw [H, tendstoUniformlyOn_iff_tendsto] at htr
  simp only [comp_apply, UniformOnFun.toFun_ofFun, Finset.prod_apply] at *
  apply htr.mono_left (prod_mono (fun ‚¶ÉU‚¶Ñ a ‚Ü¶ a) (le_principal_iff.mpr ht))

@[to_additive]
lemma hasProdLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn [TopologicalSpace Œ≤] {s : Set Œ≤}
    [LocallyCompactSpace Œ≤] (hs : IsOpen s) : HasProdLocallyUniformlyOn f g s ‚Üî
    TendstoLocallyUniformlyOn (fun (v : Finset Œπ) b ‚Ü¶ ‚àè i ‚àà v, f i b) g atTop s := by
  refine ‚ü®fun h ‚Ü¶ HasProdLocallyUniformlyOn.tendstoLocallyUniformlyOn s h, ?_‚ü©
  simp_rw [HasProdLocallyUniformlyOn, HasProdUniformlyOn, HasProd] at *
  have H := (tendstoLocallyUniformlyOn_TFAE (fun s b ‚Ü¶ ‚àè i ‚àà s, f i b) g atTop hs).out 2 0
  rw [‚Üê H]
  intro h x hx
  obtain ‚ü®r, hr, htr‚ü© := h x hx
  refine ‚ü®r, hr, ?_ ‚ü©
  have H2 := UniformOnFun.tendsto_iff_tendstoUniformlyOn
      (F := (fun s_1 ‚Ü¶ ‚àè b ‚àà s_1, (UniformOnFun.ofFun {r}) (f b)))
        (f:= (UniformOnFun.ofFun {r} g)) (p := atTop)
  simp only [UniformOnFun.ofFun_prod, Set.mem_singleton_iff, UniformOnFun.toFun_ofFun,
    forall_eq] at *
  rw [H2]
  apply htr.congr
  filter_upwards with v x hx
  simp

@[to_additive]
theorem HasProdLocallyUniformlyOn.pointwise_multipliable [TopologicalSpace Œ≤]
    [LocallyCompactSpace Œ≤] {s : Set Œ≤} (hs : IsOpen s) (h : HasProdLocallyUniformlyOn f g s) :
    ‚àÄ x ‚àà s, Multipliable (fun i ‚Ü¶ f i x) := by
  intro x hx
  rw [hasProdLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn hs] at h
  apply HasProd.multipliable (a := g x)
  exact h.tendsto_at hx

@[to_additive]
theorem MultipliableLocallyUniformlyOn.pointwise_multipliable [TopologicalSpace Œ≤]
    [LocallyCompactSpace Œ≤] {s : Set Œ≤} (hs : IsOpen s) (h : MultipliableLocallyUniformlyOn f s) :
    ‚àÄ x ‚àà s, Multipliable (fun i ‚Ü¶ f i x) := by
  obtain ‚ü®g, hg‚ü© := h
  apply hg.pointwise_multipliable hs

@[to_additive]
theorem HasProdLocallyUniformlyOn.tprod_eqOn [T2Space Œ±]
    [TopologicalSpace Œ≤] [LocallyCompactSpace Œ≤] {s : Set Œ≤} (hs : IsOpen s)
    (h : HasProdLocallyUniformlyOn f g s) : Set.EqOn (fun x ‚Ü¶ ‚àè' b, f b x) g s := by
  intro x hx
  rw [hasProdLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn hs] at h
  apply HasProd.tprod_eq
  exact h.tendsto_at hx

open Complex

/-This is just a test of the defns -/
theorem derivWithin_tsum {Œ± : Type*} (f : Œ± ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) {s : Set ‚ÑÇ}
    (hs : IsOpen s) {x : ‚ÑÇ} (hx : x ‚àà s)
    (hf : ‚àÄ y ‚àà s, Summable fun n : Œ± ‚Ü¶ f n y)
    (h : SummableLocallyUniformlyOn (fun n ‚Ü¶ (derivWithin (fun z ‚Ü¶ f n z) s)) s)
    (hf2 : ‚àÄ n r, r ‚àà s ‚Üí DifferentiableAt ‚ÑÇ (f n) r) :
    derivWithin (fun z ‚Ü¶ ‚àë' n : Œ±, f n z) s x = ‚àë' n : Œ±, derivWithin (fun z ‚Ü¶ f n z) s x := by
  apply HasDerivWithinAt.derivWithin ?_ (IsOpen.uniqueDiffWithinAt hs hx)
  apply HasDerivAt.hasDerivWithinAt
  apply hasDerivAt_of_tendstoLocallyUniformlyOn hs _ _ (fun y hy ‚Ü¶ Summable.hasSum (hf y hy)) hx
  ¬∑ use fun n : Finset Œ± ‚Ü¶ fun a ‚Ü¶ ‚àë i ‚àà n, derivWithin (fun z ‚Ü¶ f i z) s a
  ¬∑ obtain ‚ü®g, hg‚ü© := h
    have ho := hg
    rw [hasSumLocallyUniformlyOn_iff_tendstoLocallyUniformlyOn hs] at hg
    apply hg.congr_right
    intro b hb
    have hB := HasSumLocallyUniformlyOn.tsum_eqOn hs ho hb
    apply hB.symm
  ¬∑ filter_upwards
    intro t r hr
    apply HasDerivAt.sum
    intro q hq
    apply HasDerivWithinAt.hasDerivAt
    ¬∑ apply DifferentiableWithinAt.hasDerivWithinAt
      apply (hf2 q r hr).differentiableWithinAt
    ¬∑ exact IsOpen.mem_nhds hs hr

end HasProdUniformlyOn
