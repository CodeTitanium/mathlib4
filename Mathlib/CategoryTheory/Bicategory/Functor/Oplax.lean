/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathlib.CategoryTheory.Bicategory.Basic

/-!
# Oplax functors

An oplax functor `F` between bicategories `B` and `C` consists of
* a function between objects `F.obj : B ‚ü∂ C`,
* a family of functions between 1-morphisms `F.map : (a ‚ü∂ b) ‚Üí (F.obj a ‚ü∂ F.obj b)`,
* a family of functions between 2-morphisms `F.map‚ÇÇ : (f ‚ü∂ g) ‚Üí (F.map f ‚ü∂ F.map g)`,
* a family of 2-morphisms `F.mapId a : F.map (ùüô a) ‚ü∂ ùüô (F.obj a)`,
* a family of 2-morphisms `F.mapComp f g : F.map (f ‚â´ g) ‚ü∂ F.map f ‚â´ F.map g`, and
* certain consistency conditions on them.

## Main definitions

* `CategoryTheory.OplaxFunctor B C` : an oplax functor between bicategories `B` and `C`
* `CategoryTheory.OplaxFunctor.comp F G` : the composition of oplax functors

## Future work

There are two types of functors between bicategories, called lax and oplax functors, depending on
the directions of `mapId` and `mapComp`. We may need both in mathlib in the future, but for
now we only define oplax functors.
-/


namespace CategoryTheory

open Category Bicategory

open Bicategory

universe w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

section

variable {B : Type u‚ÇÅ} [Quiver.{v‚ÇÅ + 1} B] [‚àÄ a b : B, Quiver.{w‚ÇÅ + 1} (a ‚ü∂ b)]
variable {C : Type u‚ÇÇ} [Quiver.{v‚ÇÇ + 1} C] [‚àÄ a b : C, Quiver.{w‚ÇÇ + 1} (a ‚ü∂ b)]
variable {D : Type u‚ÇÉ} [Quiver.{v‚ÇÉ + 1} D] [‚àÄ a b : D, Quiver.{w‚ÇÉ + 1} (a ‚ü∂ b)]

/-- A prelax functor between bicategories consists of functions between objects,
1-morphisms, and 2-morphisms. This structure will be extended to define `OplaxFunctor`.
-/
structure PrelaxFunctor (B : Type u‚ÇÅ) [Quiver.{v‚ÇÅ + 1} B] [‚àÄ a b : B, Quiver.{w‚ÇÅ + 1} (a ‚ü∂ b)]
  (C : Type u‚ÇÇ) [Quiver.{v‚ÇÇ + 1} C] [‚àÄ a b : C, Quiver.{w‚ÇÇ + 1} (a ‚ü∂ b)] extends
  Prefunctor B C where
  /-- The action of a prelax functor on 2-morphisms. -/
  map‚ÇÇ {a b : B} {f g : a ‚ü∂ b} : (f ‚ü∂ g) ‚Üí (map f ‚ü∂ map g)

initialize_simps_projections PrelaxFunctor (+toPrefunctor, -obj, -map)

/-- The prefunctor between the underlying quivers. -/
add_decl_doc PrelaxFunctor.toPrefunctor

namespace PrelaxFunctor

attribute [coe] CategoryTheory.PrelaxFunctor.toPrefunctor

instance hasCoeToPrefunctor : Coe (PrelaxFunctor B C) (Prefunctor B C) :=
  ‚ü®toPrefunctor‚ü©

variable (F : PrelaxFunctor B C)

/-- The identity prelax functor. -/
@[simps]
def id (B : Type u‚ÇÅ) [Quiver.{v‚ÇÅ + 1} B] [‚àÄ a b : B, Quiver.{w‚ÇÅ + 1} (a ‚ü∂ b)] : PrelaxFunctor B B :=
  { Prefunctor.id B with map‚ÇÇ := fun Œ∑ => Œ∑ }

instance : Inhabited (PrelaxFunctor B B) :=
  ‚ü®PrelaxFunctor.id B‚ü©

-- Porting note: `by exact` was not necessary in mathlib3
/-- Composition of prelax functors. -/
@[simps]
def comp (F : PrelaxFunctor B C) (G : PrelaxFunctor C D) : PrelaxFunctor B D :=
  { (F : Prefunctor B C).comp ‚ÜëG with map‚ÇÇ := fun Œ∑ => by exact G.map‚ÇÇ (F.map‚ÇÇ Œ∑) }

end PrelaxFunctor

end

section

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
variable {D : Type u‚ÇÉ} [Bicategory.{w‚ÇÉ, v‚ÇÉ} D]

/-- An oplax functor `F` between bicategories `B` and `C` consists of a function between objects
`F.obj`, a function between 1-morphisms `F.map`, and a function between 2-morphisms `F.map‚ÇÇ`.

Unlike functors between categories, `F.map` do not need to strictly commute with the composition,
and do not need to strictly preserve the identity. Instead, there are specified 2-morphisms
`F.map (ùüô a) ‚ü∂ ùüô (F.obj a)` and `F.map (f ‚â´ g) ‚ü∂ F.map f ‚â´ F.map g`.

`F.map‚ÇÇ` strictly commute with compositions and preserve the identity. They also preserve the
associator, the left unitor, and the right unitor modulo some adjustments of domains and codomains
of 2-morphisms.
-/
structure OplaxFunctor (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] (C : Type u‚ÇÇ)
  [Bicategory.{w‚ÇÇ, v‚ÇÇ} C] extends PrelaxFunctor B C where
  mapId (a : B) : map (ùüô a) ‚ü∂ ùüô (obj a)
  mapComp {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : map (f ‚â´ g) ‚ü∂ map f ‚â´ map g
  mapComp_naturality_left :
    ‚àÄ {a b c : B} {f f' : a ‚ü∂ b} (Œ∑ : f ‚ü∂ f') (g : b ‚ü∂ c),
      map‚ÇÇ (Œ∑ ‚ñ∑ g) ‚â´ mapComp f' g = mapComp f g ‚â´ map‚ÇÇ Œ∑ ‚ñ∑ map g := by
    aesop_cat
  mapComp_naturality_right :
    ‚àÄ {a b c : B} (f : a ‚ü∂ b) {g g' : b ‚ü∂ c} (Œ∑ : g ‚ü∂ g'),
      map‚ÇÇ (f ‚óÅ Œ∑) ‚â´ mapComp f g' = mapComp f g ‚â´ map f ‚óÅ map‚ÇÇ Œ∑ := by
    aesop_cat
  map‚ÇÇ_id : ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (ùüô f) = ùüô (map f) := by aesop
  map‚ÇÇ_comp :
    ‚àÄ {a b : B} {f g h : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h), map‚ÇÇ (Œ∑ ‚â´ Œ∏) = map‚ÇÇ Œ∑ ‚â´ map‚ÇÇ Œ∏ := by
    aesop_cat
  -- Porting note: `map‚ÇÇ_associator_aux` was used here in lean 3, but this was a hack
  -- to avoid a timeout; we revert this hack here (because it was causing other problems
  -- and was not necessary in lean 4)
  map‚ÇÇ_associator :
    ‚àÄ {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d),
      map‚ÇÇ (Œ±_ f g h).hom ‚â´ mapComp f (g ‚â´ h) ‚â´ map f ‚óÅ mapComp g h =
    mapComp (f ‚â´ g) h ‚â´ mapComp f g ‚ñ∑ map h ‚â´ (Œ±_ (map f) (map g) (map h)).hom := by
    aesop_cat
  map‚ÇÇ_leftUnitor :
    ‚àÄ {a b : B} (f : a ‚ü∂ b),
      map‚ÇÇ (Œª_ f).hom = mapComp (ùüô a) f ‚â´ mapId a ‚ñ∑ map f ‚â´ (Œª_ (map f)).hom := by
    aesop_cat
  map‚ÇÇ_rightUnitor :
    ‚àÄ {a b : B} (f : a ‚ü∂ b),
      map‚ÇÇ (œÅ_ f).hom = mapComp f (ùüô b) ‚â´ map f ‚óÅ mapId b ‚â´ (œÅ_ (map f)).hom := by
    aesop_cat

initialize_simps_projections OplaxFunctor (+toPrelaxFunctor, -obj, -map, -map‚ÇÇ)

namespace OplaxFunctor

-- Porting note: more stuff was tagged `simp` here in lean 3 but `reassoc (attr := simp)`
-- is doing this job a couple of lines below this.
attribute [simp] map‚ÇÇ_id

attribute [reassoc (attr := simp)]
  mapComp_naturality_left mapComp_naturality_right map‚ÇÇ_associator

-- the simpNF linter complains that `map‚ÇÇ_leftUnitor_assoc` etc can be
-- proved with `simp` so I move them here
attribute [reassoc] map‚ÇÇ_leftUnitor map‚ÇÇ_comp map‚ÇÇ_rightUnitor
attribute [simp] map‚ÇÇ_leftUnitor map‚ÇÇ_comp map‚ÇÇ_rightUnitor
section

/-- The prelax functor between the underlying quivers. -/
add_decl_doc OplaxFunctor.toPrelaxFunctor

attribute [nolint docBlame] CategoryTheory.OplaxFunctor.mapId
  CategoryTheory.OplaxFunctor.mapComp
  CategoryTheory.OplaxFunctor.mapComp_naturality_left
  CategoryTheory.OplaxFunctor.mapComp_naturality_right
  CategoryTheory.OplaxFunctor.map‚ÇÇ_id
  CategoryTheory.OplaxFunctor.map‚ÇÇ_comp
  CategoryTheory.OplaxFunctor.map‚ÇÇ_associator
  CategoryTheory.OplaxFunctor.map‚ÇÇ_leftUnitor
  CategoryTheory.OplaxFunctor.map‚ÇÇ_rightUnitor

instance hasCoeToPrelax : Coe (OplaxFunctor B C) (PrelaxFunctor B C) :=
  ‚ü®toPrelaxFunctor‚ü©

variable (F : OplaxFunctor B C)

/-- Function between 1-morphisms as a functor. -/
@[simps]
def mapFunctor (a b : B) : (a ‚ü∂ b) ‚•§ (F.obj a ‚ü∂ F.obj b) where
  obj f := F.map f
  map Œ∑ := F.map‚ÇÇ Œ∑

/-- The identity oplax functor. -/
@[simps]
def id (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] : OplaxFunctor B B :=
  { PrelaxFunctor.id B with
    mapId := fun a => ùüô (ùüô a)
    mapComp := fun f g => ùüô (f ‚â´ g)
  }

instance : Inhabited (OplaxFunctor B B) :=
  ‚ü®id B‚ü©

/-- Composition of oplax functors. -/
--@[simps]
def comp (F : OplaxFunctor B C) (G : OplaxFunctor C D) : OplaxFunctor B D :=
  {
    (F : PrelaxFunctor B C).comp G with
    mapId := fun a => by exact (G.mapFunctor _ _).map (F.mapId a) ‚â´ G.mapId (F.obj a)
    mapComp := fun f g => by
      exact (G.mapFunctor _ _).map (F.mapComp f g) ‚â´ G.mapComp (F.map f) (F.map g)
    mapComp_naturality_left := fun Œ∑ g => by
      dsimp
      rw [‚Üê map‚ÇÇ_comp_assoc, mapComp_naturality_left, map‚ÇÇ_comp_assoc, mapComp_naturality_left,
        assoc]
    mapComp_naturality_right := fun Œ∑ => by
      dsimp
      intros
      rw [‚Üê map‚ÇÇ_comp_assoc, mapComp_naturality_right, map‚ÇÇ_comp_assoc, mapComp_naturality_right,
        assoc]
    map‚ÇÇ_associator := fun f g h => by
      dsimp
      simp only [map‚ÇÇ_associator, ‚Üê map‚ÇÇ_comp_assoc, ‚Üê mapComp_naturality_right_assoc,
        whiskerLeft_comp, assoc]
      simp only [map‚ÇÇ_associator, map‚ÇÇ_comp, mapComp_naturality_left_assoc, comp_whiskerRight,
        assoc]
    map‚ÇÇ_leftUnitor := fun f => by
      dsimp
      simp only [map‚ÇÇ_leftUnitor, map‚ÇÇ_comp, mapComp_naturality_left_assoc, comp_whiskerRight,
        assoc]
    map‚ÇÇ_rightUnitor := fun f => by
      dsimp
      simp only [map‚ÇÇ_rightUnitor, map‚ÇÇ_comp, mapComp_naturality_right_assoc, whiskerLeft_comp,
        assoc] }

@[simps]
def map‚ÇÇIso (F : OplaxFunctor B C) {a b : B} {f g : a ‚ü∂ b} (Œ∑ : f ‚âÖ g) : F.map f ‚âÖ F.map g where
  hom := F.map‚ÇÇ Œ∑.hom
  inv := F.map‚ÇÇ Œ∑.inv
  hom_inv_id := by rw [‚ÜêF.map‚ÇÇ_comp]; simp only [Iso.hom_inv_id, map‚ÇÇ_id]
  inv_hom_id := by rw [‚ÜêF.map‚ÇÇ_comp]; simp only [Iso.inv_hom_id, map‚ÇÇ_id]

/-- A structure on an oplax functor that promotes an oplax functor to a pseudofunctor.
See `Pseudofunctor.mkOfOplax`.
-/
structure PseudoCore (F : OplaxFunctor B C) where
  mapIdIso (a : B) : F.map (ùüô a) ‚âÖ ùüô (F.obj a)
  mapCompIso {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : F.map (f ‚â´ g) ‚âÖ F.map f ‚â´ F.map g
  mapIdIso_hom : ‚àÄ {a : B}, (mapIdIso a).hom = F.mapId a := by aesop_cat
  mapCompIso_hom :
    ‚àÄ {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c), (mapCompIso f g).hom = F.mapComp f g := by aesop_cat

attribute [nolint docBlame] CategoryTheory.OplaxFunctor.PseudoCore.mapIdIso
  CategoryTheory.OplaxFunctor.PseudoCore.mapCompIso
  CategoryTheory.OplaxFunctor.PseudoCore.mapIdIso_hom
  CategoryTheory.OplaxFunctor.PseudoCore.mapCompIso_hom

attribute [simp] PseudoCore.mapIdIso_hom PseudoCore.mapCompIso_hom

end

end OplaxFunctor

end

end CategoryTheory
