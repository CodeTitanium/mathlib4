/-
Copyright (c) 2024 Calle S├Хnne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle S├Хnne
-/
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
import Mathlib.CategoryTheory.Opposites

/-!
# Opposite bicategories

We provide a bicategory instance on `Cрхњрхќ` given a bicategory instance on `C`.
The morphisms `X РЪХ Y` in `Cрхњрхќ` are the morphisms `Y РЪХ X` in `C`.
The natural transformations `F РЪХ G` in `Cрхњрхќ` are the natural transformations `unop F РЪХ unop G` in
`C`, in other words the directions of natural transformations are preserved.

We also provide various lemmas in going between `LocallyDiscrete Cрхњрхќ` and `(LocallyDiscrete C)рхњрхќ`.

# Remarks
There are multiple notions of opposite categories for bicategories.
- There is `Cрхњрхќ` as defined above, also known as the "1-cell dual".
- There is the "2-cell dual", `CрХюрхњ` where only the natural transformations are reversed
- There is the "bi-dual" `CрХюрхњрхњрхќ` where the directions of both the morphisms and the natural
  transformations are reversed.
-/

universe w v u

open CategoryTheory Bicategory Opposite


/-- The type of objects of the 1-cell opposite of a bicategory `B` -/
structure Bicategory.opposite (B : Type u) :=
  /-- The canonical map `Bр┤«рхњрхќ` -/
  unbop : B

namespace Bicategory.opposite

variable {B : Type u}

notation:max B "р┤«рхњрхќ" => Bicategory.opposite B

def bop (a : B) : Bр┤«рхњрхќ := РЪеaРЪЕ

theorem bop_injective : Function.Injective (bop : B Рєњ Bр┤«рхњрхќ) := fun _ _ => congr_arg opposite.unbop

theorem unbop_injective : Function.Injective (unbop : Bр┤«рхњрхќ Рєњ B) := fun РЪе_РЪЕРЪе_РЪЕ => by simp

theorem bop_inj_iff (x y : B) : bop x = bop y Рєћ x = y := bop_injective.eq_iff

@[simp]
theorem unmop_inj_iff (x y : Bр┤«рхњрхќ) : unbop x = unbop y Рєћ x = y := unbop_injective.eq_iff

@[simp]
theorem bop_unbop (a : Bр┤«рхњрхќ) : bop (unbop a) = a :=
  rfl

@[simp]
theorem unbop_bop (a : B) : unbop (bop a) = a :=
  rfl

-- TODO: could have more api here, see Data.Opposite

end Bicategory.opposite

open Bicategory.opposite

variable {B : Type u} [Bicategory.{w, v} B]

/-- `Bр┤«рхњрхќ` reverses the 1-morphisms in `B` -/
instance Hom : Quiver (Bр┤«рхњрхќ) where
  Hom := fun a b => (unbop b РЪХ unbop a)р┤«рхњрхќ

/-- The opposite of a 1-morphism in `B`. -/
def Quiver.Hom.bop {a b : B} (f : a РЪХ b) : bop b РЪХ bop a := РЪеfРЪЕ

/-- Given a 1-morhpism in `Bр┤«рхњрхќ`, we can take the "unopposite" back in `B`. -/
def Quiver.Hom.unbop {a b : Bр┤«рхњрхќ} (f : a РЪХ b) : unbop b РЪХ unbop a :=
  Bicategory.opposite.unbop f

-- TODO: op/unop inj can be added here
@[simp]
theorem Quiver.Hom.unbop_bop {X Y : B} (f : X РЪХ Y) : f.bop.unbop = f :=
  rfl

@[simp]
theorem Quiver.Hom.bop_unbop {X Y : Bр┤«рхњрхќ} (f : X РЪХ Y) : f.unbop.bop = f :=
  rfl

/-- `Bр┤«рхњрхќ` preserves the direction of all 2-morphisms in `B` -/
instance homCategory (a b : Bр┤«рхњрхќ) : Quiver (a РЪХ b) where
  Hom := fun f g => (f.unbop РЪХ g.unbop)р┤«рхњрхќ

def bop2 {a b : B} {f g : a РЪХ b} (╬и : f РЪХ g) : f.bop РЪХ g.bop :=
  Bicategory.opposite.bop ╬и

def unbop2 {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЪХ g) : f.unbop РЪХ g.unbop :=
  Bicategory.opposite.unbop ╬и

theorem bop2_inj {a b : B} {f g : a РЪХ b} :
    Function.Injective (bop2 : (f РЪХ g) Рєњ (f.bop РЪХ g.bop)) :=
  fun _ _ H => congr_arg unbop2 H

theorem unbop2_inj {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} :
    Function.Injective (unbop2 : (f РЪХ g) Рєњ (f.unbop РЪХ g.unbop)) :=
  fun _ _ H => congr_arg bop2 H

-- TODO: iff versions of these?

@[simp]
theorem unbop_bop2 {a b : B} {f g : a РЪХ b} (╬и : f РЪХ g) : unbop2 (bop2 ╬и) = ╬и := rfl

@[simp]
theorem bop_unbop2 {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЪХ g) : bop2 (unbop2 ╬и) = ╬и := rfl

-- @[simps] here causes a loop!!!!
instance homCategory.opposite {a b : Bр┤«рхњрхќ} : Category.{w} (a РЪХ b) where
  id := fun f => bop2 (­ЮЪЎ f.unbop)
  comp := fun ╬и ╬И => bop2 ((unbop2 ╬и) РЅФ (unbop2 ╬И))
  -- TODO: why do I need to specify Category.id_comp here...
  id_comp := fun {f g} ╬и => by simp [Category.id_comp (unbop2 ╬и)]

@[simp]
theorem bop2_comp {a b : B} {f g h : a РЪХ b} (╬и : f РЪХ g) (╬И : g РЪХ h) :
    bop2 (╬и РЅФ ╬И) = bop2 ╬и РЅФ bop2 ╬И :=
  rfl

@[simp]
theorem bop2_id {a b : B} {f : a РЪХ b} : bop2 (­ЮЪЎ f) = ­ЮЪЎ f.bop :=
  rfl

@[simp]
theorem unbop2_comp {a b : Bр┤«рхњрхќ} {f g h : a РЪХ b} (╬и : f РЪХ g) (╬И : g РЪХ h) :
    unbop2 (╬и РЅФ ╬И) = unbop2 ╬и РЅФ unbop2 ╬И :=
  rfl

@[simp]
theorem unbop2_id {a b : Bр┤«рхњрхќ} {f : a РЪХ b} : unbop2 (­ЮЪЎ f) = ­ЮЪЎ f.unbop :=
  rfl

@[simp]
theorem unbop2_id_bop {a b : B} {f : a РЪХ b} : unbop2 (­ЮЪЎ f.bop) = ­ЮЪЎ f :=
  rfl

@[simp]
theorem bop2_id_unbop {a b : Bр┤«рхњрхќ} {f : a РЪХ b} : bop2 (­ЮЪЎ f.unbop) = ­ЮЪЎ f :=
  rfl

namespace CategoryTheory.Iso

/-- The opposite natural isomorphism  -/
@[simps]
protected def bop2 {a b : B} {f g : a РЪХ b} (╬и : f РЅЁ g) : f.bop РЅЁ g.bop where
  hom := bop2 ╬и.hom
  inv := bop2 ╬и.inv
  hom_inv_id := unbop2_inj <| by simp
  inv_hom_id := unbop2_inj <| by simp

/-- The natural isomorphism obtained from a natural isomorphism in `Bр┤«рхњрхќ` -/
@[simps]
protected def unbop2 {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЅЁ g) : f.unbop РЅЁ g.unbop where
  hom := unbop2 ╬и.hom
  inv := unbop2 ╬и.inv
  hom_inv_id := bop2_inj <| by simp
  inv_hom_id := bop2_inj <| by simp

@[simp]
theorem unbop2_bop2 {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЅЁ g) : ╬и.unbop2.bop2 = ╬и := by (ext; rfl)

@[simp]
theorem unbop2_bop {a b : Bр┤«рхњрхќ} {f g : a РЪХ b} (╬и : f РЅЁ g) : ╬и.unbop2.bop2 = ╬и := by (ext; rfl)

-- TODO: more iso API? removeOp?

end CategoryTheory.Iso

/-- The 1-dual bicategory `Cрхњрхќ`

See ...
-/
@[simps!]
instance Bicategory.Opposite : Bicategory.{w, v} Bр┤«рхњрхќ where
  -- Need to break these out and add lemmas for them probably?
  id := fun a => (­ЮЪЎ a.unbop).bop
  comp := fun f g => (g.unbop РЅФ f.unbop).bop
  whiskerLeft f g h ╬и := bop2 ((unbop2 ╬и) Рќи f.unbop)
  whiskerRight ╬и h := bop2 (h.unbop РЌЂ (unbop2 ╬и))
  associator f g h := by exact (Bicategory.associator h.unbop g.unbop f.unbop).symm.bop2
  -- TODO: alternative is to use leftUnitor + symm
  leftUnitor f := by exact (Bicategory.rightUnitor f.unbop).bop2
  rightUnitor f := by exact (Bicategory.leftUnitor f.unbop).bop2
  whiskerLeft_id f g := unbop2_inj <| Bicategory.id_whiskerRight g.unbop f.unbop
  whiskerLeft_comp f g h i ╬и ╬И := unbop2_inj <|
    Bicategory.comp_whiskerRight (unbop2 ╬и) (unbop2 ╬И) f.unbop
  id_whiskerLeft ╬и := unbop2_inj <| whiskerRight_id (unbop2 ╬и)
  comp_whiskerLeft {a b c d} f g {h h'} ╬и := unbop2_inj <|
    whiskerRight_comp (unbop2 ╬и) g.unbop f.unbop
  id_whiskerRight f g := unbop2_inj <| Bicategory.whiskerLeft_id g.unbop f.unbop
  comp_whiskerRight ╬и ╬И i := unbop2_inj <| Bicategory.whiskerLeft_comp i.unbop (unbop2 ╬и) (unbop2 ╬И)
  whiskerRight_id ╬и := unbop2_inj <| id_whiskerLeft (unbop2 ╬и)
  whiskerRight_comp ╬и g h := unbop2_inj <| comp_whiskerLeft h.unbop g.unbop (unbop2 ╬и)
  whisker_assoc f g g' ╬и i := by apply unbop2_inj; simp
  whisker_exchange ╬и ╬И := by apply unbop2_inj; simp [(whisker_exchange (unbop2 ╬И) (unbop2 ╬и)).symm]
  pentagon f g h i := by apply unbop2_inj; simp
  triangle f g := by apply unbop2_inj; simp


/-
TODO:
- simp lemmas
- compatability with LocallyDiscrete
-- Want a functor between them?

-/
