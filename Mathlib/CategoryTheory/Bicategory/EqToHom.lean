import Mathlib.CategoryTheory.Bicategory.Functor
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete

namespace CategoryTheory

open Category Bicategory

namespace Pseudofunctor

universe w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ


variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
variable (F : Pseudofunctor B C)

lemma map‚ÇÇ_eqToHom {a b : B} {f g : a ‚ü∂ b} (h : f = g) :
    F.map‚ÇÇ (eqToHom h) = eqToHom (F.congr_map h) := by
  subst h; simp only [eqToHom_refl, map‚ÇÇ_id]

end Pseudofunctor

open CategoryTheory Bicategory Discrete LocallyDiscrete

universe w‚ÇÇ v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

variable {I : Type u‚ÇÅ} [Category.{v‚ÇÅ} I] {B : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} B] [Strict B]
variable {F : Pseudofunctor (LocallyDiscrete I) B}

-- These should be stated in terms of strict bicategories

-- Pseudofunctors from locally discrete categories to strict bicategories
lemma map‚ÇÇ_left_unitor' {a b : I} (f : a ‚ü∂ b) : (F.mapComp (mkHom (ùüô a)) (mkHom f)).inv =
    (F.mapId ‚ü®a‚ü©).hom ‚ñ∑ F.map (mkHom f) ‚â´ eqToHom (by simp) := by
  have h := F.map‚ÇÇ_left_unitor (mkHom f)
  simp at h
  rw [F.map‚ÇÇ_eqToHom, ‚ÜêIso.inv_comp_eq, comp_eqToHom_iff] at h
  simp at h
  apply h

lemma map‚ÇÇ_right_unitor' {a b : I} (f : a ‚ü∂ b) : (F.mapComp (mkHom f) (mkHom (ùüô b))).inv =
    F.map (mkHom f) ‚óÅ (F.mapId ‚ü®b‚ü©).hom ‚â´ eqToHom (by simp) := by
  have h := F.map‚ÇÇ_right_unitor (mkHom f)
  simp at h
  rw [F.map‚ÇÇ_eqToHom, ‚ÜêIso.inv_comp_eq, comp_eqToHom_iff] at h
  simp at h
  apply h

lemma map‚ÇÇ_associator' {a b c d : I} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    (F.mapComp (mkHom f) ((mkHom g) ‚â´ (mkHom h))).hom ‚â´ (F.map (mkHom f)) ‚óÅ (F.mapComp (mkHom g) (mkHom h)).hom
    = eqToHom (by simp) ‚â´ (F.mapComp ((mkHom f) ‚â´ (mkHom g)) (mkHom h)).hom ‚â´
    (F.mapComp (mkHom f) (mkHom g)).hom ‚ñ∑ F.map (mkHom h) ‚â´ eqToHom (by simp)
    := by
  have h := F.map‚ÇÇ_associator (mkHom f) (mkHom g) (mkHom h)
  simp at h
  rw [F.map‚ÇÇ_eqToHom, ‚ÜêIso.inv_comp_eq] at h
  -- TODO: rewrite thing as inv then move to LHS (+ restate lemma to use this notation instead!)
  sorry
