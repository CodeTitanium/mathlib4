/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov, Fr√©d√©ric Dupuis
-/
import Mathlib.Analysis.Convex.Hull

/-!
# Convex cones

In a `R`-module `M`, we define a convex cone as a set `s` such that `a ‚Ä¢ x + b ‚Ä¢ y ‚àà s` whenever
`x, y ‚àà s` and `a, b > 0`. We prove that convex cones form a `CompleteLattice`, and define their
images (`ConvexCone.map`) and preimages (`ConvexCone.comap`) under linear maps.

We define pointed, blunt, flat and salient cones, and prove the correspondence between
convex cones and ordered modules.

We define `Convex.toCone` to be the minimal cone that includes a given convex set.

## Main statements

In `Mathlib/Analysis/Convex/Cone/Extension.lean` we prove
the M. Riesz extension theorem and a form of the Hahn-Banach theorem.

In `Mathlib/Analysis/Convex/Cone/Dual.lean` we prove
a variant of the hyperplane separation theorem.

## Implementation notes

While `Convex R` is a predicate on sets, `ConvexCone R M` is a bundled convex cone.

## References

* https://en.wikipedia.org/wiki/Convex_cone
* [Stephen P. Boyd and Lieven Vandenberghe, *Convex Optimization*][boydVandenberghe2004]
* [Emo Welzl and Bernd G√§rtner, *Cone Programming*][welzl_garter]
-/

assert_not_exists TopologicalSpace Real Cardinal

open Set LinearMap Pointwise

variable {ùïú R M N O : Type*}

/-! ### Definition of `ConvexCone` and basic properties -/

section Definitions

variable [Semiring R] [PartialOrder R]

variable (R M) in
/-- A convex cone is a subset `s` of a `R`-module such that `a ‚Ä¢ x + b ‚Ä¢ y ‚àà s` whenever `a, b > 0`
and `x, y ‚àà s`. -/
structure ConvexCone [IsOrderedRing R] [AddCommMonoid M] [SMul R M] where
  /-- The **carrier set** underlying this cone: the set of points contained in it -/
  carrier : Set M
  smul_mem' : ‚àÄ ‚¶Éc : R‚¶Ñ, 0 < c ‚Üí ‚àÄ ‚¶Éx : M‚¶Ñ, x ‚àà carrier ‚Üí c ‚Ä¢ x ‚àà carrier
  add_mem' : ‚àÄ ‚¶Éx‚¶Ñ (_ : x ‚àà carrier) ‚¶Éy‚¶Ñ (_ : y ‚àà carrier), x + y ‚àà carrier

end Definitions

namespace ConvexCone

section OrderedSemiring

variable [Semiring R] [PartialOrder R] [IsOrderedRing R] [AddCommMonoid M]

section SMul

variable [SMul R M] {C C‚ÇÅ C‚ÇÇ : ConvexCone R M} {s : Set M} {c : R} {x : M}

instance : SetLike (ConvexCone R M) M where
  coe := carrier
  coe_injective' C‚ÇÅ C‚ÇÇ h := by cases C‚ÇÅ; congr!

@[simp]
theorem coe_mk (s : Set M) (h‚ÇÅ h‚ÇÇ) : ‚Üë(mk (R := R) s h‚ÇÅ h‚ÇÇ) = s :=
  rfl

@[simp]
theorem mem_mk {s : Set M} {h‚ÇÅ h‚ÇÇ x} : x ‚àà mk (R := R) s h‚ÇÅ h‚ÇÇ ‚Üî x ‚àà s :=
  Iff.rfl

/-- Two `ConvexCone`s are equal if they have the same elements. -/
@[ext]
theorem ext (h : ‚àÄ x, x ‚àà C‚ÇÅ ‚Üî x ‚àà C‚ÇÇ) : C‚ÇÅ = C‚ÇÇ :=
  SetLike.ext h

variable (C) in
@[aesop safe apply (rule_sets := [SetLike])]
protected lemma smul_mem (hc : 0 < c) (hx : x ‚àà C) : c ‚Ä¢ x ‚àà C := C.smul_mem' hc hx

variable (C) in
protected lemma add_mem ‚¶Éx‚¶Ñ (hx : x ‚àà C) ‚¶Éy‚¶Ñ (hy : y ‚àà C) : x + y ‚àà C := C.add_mem' hx hy

instance : AddMemClass (ConvexCone R M) M where add_mem ha hb := add_mem' _ ha hb

/-- Copy of a convex cone with a new `carrier` equal to the old one. Useful to fix definitional
equalities. -/
@[simps] protected def copy (C : ConvexCone R M) (s : Set M) (hs : s = C) : ConvexCone R M where
  carrier := s
  add_mem' := hs.symm ‚ñ∏ C.add_mem'
  smul_mem' := by simpa [hs] using C.smul_mem'

lemma copy_eq (C : ConvexCone R M) (s : Set M) (hs) : C.copy s hs = C := SetLike.coe_injective hs

instance : InfSet (ConvexCone R M) where
  sInf S :=
    ‚ü®‚ãÇ C ‚àà S, C, fun _r hr _x hx ‚Ü¶ mem_biInter fun C hC ‚Ü¶ C.smul_mem hr <| mem_iInter‚ÇÇ.1 hx C hC,
      fun _ hx _ hy ‚Ü¶
      mem_biInter fun C hC ‚Ü¶ add_mem (mem_iInter‚ÇÇ.1 hx C hC) (mem_iInter‚ÇÇ.1 hy C hC)‚ü©

@[simp, norm_cast]
lemma coe_sInf (S : Set (ConvexCone R M)) : ‚Üë(sInf S) = ‚ãÇ C ‚àà S, (C : Set M) := rfl

@[simp] lemma mem_sInf {S : Set (ConvexCone R M)} : x ‚àà sInf S ‚Üî ‚àÄ C ‚àà S, x ‚àà C := mem_iInter‚ÇÇ

@[simp, norm_cast]
theorem coe_iInf {Œπ : Sort*} (f : Œπ ‚Üí ConvexCone R M) : ‚Üë(iInf f) = ‚ãÇ i, (f i : Set M) := by
  simp [iInf]

@[simp]
lemma mem_iInf {Œπ : Sort*} {f : Œπ ‚Üí ConvexCone R M} : x ‚àà iInf f ‚Üî ‚àÄ i, x ‚àà f i :=
  mem_iInter‚ÇÇ.trans <| by simp

instance : CompleteSemilatticeInf (ConvexCone R M) where
  sInf_le S C hC := by rw [‚Üê SetLike.coe_subset_coe, coe_sInf]; exact biInter_subset_of_mem hC
  le_sInf S C hC := by rw [‚Üê SetLike.coe_subset_coe, coe_sInf]; exact subset_iInter‚ÇÇ hC

variable (R s) in
/-- The cone hull of a set. The smallest convex cone containing that set. -/
def hull : ConvexCone R M := sInf {C : ConvexCone R M | s ‚äÜ C}

lemma subset_hull : s ‚äÜ hull R s := by simp [hull]

lemma hull_min (hsC : s ‚äÜ C) : hull R s ‚â§ C := sInf_le hsC

lemma hull_le_iff : hull R s ‚â§ C ‚Üî s ‚äÜ C := ‚ü®subset_hull.trans, hull_min‚ü©

lemma gc_hull_coe : GaloisConnection (hull R : Set M ‚Üí ConvexCone R M) (‚Üë) :=
  fun _C _s ‚Ü¶ hull_le_iff

-- TODO: Fix docstring of `NonUnitalSubalgebra.gi` (it's not `Subtype.val`)
/-- Galois insertion between `ConvexCone` and `SetLike.coe`. -/
protected def gi : GaloisInsertion (hull R : Set M ‚Üí ConvexCone R M) (‚Üë)  where
  gc := gc_hull_coe
  le_l_u _ := subset_hull
  choice s hs := (hull R s).copy s <| subset_hull.antisymm hs
  choice_eq _ _ := copy_eq _ _ _

instance : Bot (ConvexCone R M) :=
  ‚ü®‚ü®‚àÖ, fun _ _ _ => False.elim, fun _ => False.elim‚ü©‚ü©

@[simp] lemma not_mem_bot : x ‚àâ (‚ä• : ConvexCone R M) := id

@[simp, norm_cast] lemma coe_bot : ‚Üë(‚ä• : ConvexCone R M) = (‚àÖ : Set M) := rfl

@[simp, norm_cast]
lemma coe_eq_empty : (C : Set M) = ‚àÖ ‚Üî C = ‚ä• := by rw [‚Üê coe_bot (R := R)]; norm_cast

instance : CompleteLattice (ConvexCone R M) where
  bot := ‚ä•
  bot_le _ := empty_subset _
  __ := ConvexCone.gi.liftCompleteLattice

variable (C‚ÇÅ C‚ÇÇ) in
@[simp, norm_cast] lemma coe_inf : (C‚ÇÅ ‚äì C‚ÇÇ) = (C‚ÇÅ ‚à© C‚ÇÇ : Set M) := rfl

@[simp] lemma mem_inf : x ‚àà C‚ÇÅ ‚äì C‚ÇÇ ‚Üî x ‚àà C‚ÇÅ ‚àß x ‚àà C‚ÇÇ := .rfl

@[simp] lemma mem_top : x ‚àà (‚ä§ : ConvexCone R M) := mem_univ x

@[simp, norm_cast] lemma coe_top : ‚Üë(‚ä§ : ConvexCone R M) = (univ : Set M) := rfl

@[simp, norm_cast] lemma disjoint_coe : Disjoint (C‚ÇÅ : Set M) C‚ÇÇ ‚Üî Disjoint C‚ÇÅ C‚ÇÇ := by
  simp [disjoint_iff, ‚Üê coe_inf]

instance : Inhabited (ConvexCone R M) := ‚ü®‚ä•‚ü©

end SMul

section Module

variable [Module R M] (S : ConvexCone R M)

protected theorem convex : Convex R (S : Set M) :=
  convex_iff_forall_pos.2 fun _ hx _ hy _ _ ha hb _ ‚Ü¶ add_mem (S.smul_mem ha hx) (S.smul_mem hb hy)

end Module

section Maps

variable [AddCommMonoid N] [AddCommMonoid O]
variable [Module R M] [Module R N] [Module R O]

/-- The image of a convex cone under a `R`-linear map is a convex cone. -/
def map (f : M ‚Üí‚Çó[R] N) (S : ConvexCone R M) : ConvexCone R N where
  carrier := f '' S
  smul_mem' := fun c hc _ ‚ü®x, hx, hy‚ü© => hy ‚ñ∏ f.map_smul c x ‚ñ∏ mem_image_of_mem f (S.smul_mem hc hx)
  add_mem' := fun _ ‚ü®x‚ÇÅ, hx‚ÇÅ, hy‚ÇÅ‚ü© _ ‚ü®x‚ÇÇ, hx‚ÇÇ, hy‚ÇÇ‚ü© =>
    hy‚ÇÅ ‚ñ∏ hy‚ÇÇ ‚ñ∏ f.map_add x‚ÇÅ x‚ÇÇ ‚ñ∏ mem_image_of_mem f (add_mem hx‚ÇÅ hx‚ÇÇ)

@[simp, norm_cast]
theorem coe_map (S : ConvexCone R M) (f : M ‚Üí‚Çó[R] N) : (S.map f : Set N) = f '' S :=
  rfl

@[simp]
theorem mem_map {f : M ‚Üí‚Çó[R] N} {S : ConvexCone R M} {y : N} : y ‚àà S.map f ‚Üî ‚àÉ x ‚àà S, f x = y :=
  Set.mem_image f S y

theorem map_map (g : N ‚Üí‚Çó[R] O) (f : M ‚Üí‚Çó[R] N) (S : ConvexCone R M) :
    (S.map f).map g = S.map (g.comp f) :=
  SetLike.coe_injective <| image_image g f S

@[simp]
theorem map_id (S : ConvexCone R M) : S.map LinearMap.id = S :=
  SetLike.coe_injective <| image_id _

/-- The preimage of a convex cone under a `R`-linear map is a convex cone. -/
def comap (f : M ‚Üí‚Çó[R] N) (S : ConvexCone R N) : ConvexCone R M where
  carrier := f ‚Åª¬π' S
  smul_mem' c hc x hx := by
    rw [mem_preimage, f.map_smul c]
    exact S.smul_mem hc hx
  add_mem' x hx y hy := by
    rw [mem_preimage, f.map_add]
    exact add_mem hx hy

@[simp]
theorem coe_comap (f : M ‚Üí‚Çó[R] N) (S : ConvexCone R N) : (S.comap f : Set M) = f ‚Åª¬π' S :=
  rfl

@[simp]
theorem comap_id (S : ConvexCone R M) : S.comap LinearMap.id = S :=
  rfl

theorem comap_comap (g : N ‚Üí‚Çó[R] O) (f : M ‚Üí‚Çó[R] N) (S : ConvexCone R O) :
    (S.comap g).comap f = S.comap (g.comp f) :=
  rfl

@[simp]
theorem mem_comap {f : M ‚Üí‚Çó[R] N} {S : ConvexCone R N} {x : M} : x ‚àà S.comap f ‚Üî f x ‚àà S :=
  Iff.rfl

end Maps

end OrderedSemiring

section LinearOrderedField

variable [Field R] [LinearOrder R] [IsStrictOrderedRing R]

section MulAction

variable [AddCommMonoid M]
variable [MulAction R M] (S : ConvexCone R M)

theorem smul_mem_iff {c : R} (hc : 0 < c) {x : M} : c ‚Ä¢ x ‚àà S ‚Üî x ‚àà S :=
  ‚ü®fun h => inv_smul_smul‚ÇÄ hc.ne' x ‚ñ∏ S.smul_mem (inv_pos.2 hc) h, S.smul_mem hc‚ü©

end MulAction

section OrderedAddCommGroup

variable [AddCommGroup M] [PartialOrder M] [Module R M]

/-- Constructs an ordered module given an `OrderedAddCommGroup`, a cone, and a proof that
the order relation is the one defined by the cone.
-/
theorem to_orderedSMul (C : ConvexCone R M) (h : ‚àÄ x y : M, x ‚â§ y ‚Üî y - x ‚àà C) : OrderedSMul R M :=
  .mk' fun x y z xy hz ‚Ü¶ by
    rw [h (z ‚Ä¢ x) (z ‚Ä¢ y), ‚Üê smul_sub z y x]; exact C.smul_mem hz ((h x y).mp xy.le)

end OrderedAddCommGroup

end LinearOrderedField

/-! ### Convex cones with extra properties -/


section OrderedSemiring

variable [Semiring R] [PartialOrder R] [IsOrderedRing R]

section AddCommMonoid

variable [AddCommMonoid M] [SMul R M] (S : ConvexCone R M)

/-- A convex cone is pointed if it includes `0`. -/
def Pointed (S : ConvexCone R M) : Prop :=
  (0 : M) ‚àà S

/-- A convex cone is blunt if it doesn't include `0`. -/
def Blunt (S : ConvexCone R M) : Prop :=
  (0 : M) ‚àâ S

theorem pointed_iff_not_blunt (S : ConvexCone R M) : S.Pointed ‚Üî ¬¨S.Blunt :=
  ‚ü®fun h‚ÇÅ h‚ÇÇ => h‚ÇÇ h‚ÇÅ, Classical.not_not.mp‚ü©

theorem blunt_iff_not_pointed (S : ConvexCone R M) : S.Blunt ‚Üî ¬¨S.Pointed := by
  rw [pointed_iff_not_blunt, Classical.not_not]

theorem Pointed.mono {S C‚ÇÇ : ConvexCone R M} (h : S ‚â§ C‚ÇÇ) : S.Pointed ‚Üí C‚ÇÇ.Pointed :=
  @h _

theorem Blunt.anti {S C‚ÇÇ : ConvexCone R M} (h : C‚ÇÇ ‚â§ S) : S.Blunt ‚Üí C‚ÇÇ.Blunt :=
  (¬∑ ‚àò @h 0)

end AddCommMonoid

section AddCommGroup

variable [AddCommGroup M] [SMul R M] (S : ConvexCone R M)

/-- A convex cone is flat if it contains some nonzero vector `x` and its opposite `-x`. -/
def Flat : Prop :=
  ‚àÉ x ‚àà S, x ‚â† (0 : M) ‚àß -x ‚àà S

/-- A convex cone is salient if it doesn't include `x` and `-x` for any nonzero `x`. -/
def Salient : Prop :=
  ‚àÄ x ‚àà S, x ‚â† (0 : M) ‚Üí -x ‚àâ S

theorem salient_iff_not_flat (S : ConvexCone R M) : S.Salient ‚Üî ¬¨S.Flat := by
  simp [Salient, Flat]

theorem Flat.mono {S C‚ÇÇ : ConvexCone R M} (h : S ‚â§ C‚ÇÇ) : S.Flat ‚Üí C‚ÇÇ.Flat
  | ‚ü®x, hxS, hx, hnxS‚ü© => ‚ü®x, h hxS, hx, h hnxS‚ü©

theorem Salient.anti {S C‚ÇÇ : ConvexCone R M} (h : C‚ÇÇ ‚â§ S) : S.Salient ‚Üí C‚ÇÇ.Salient :=
  fun hS x hxT hx hnT => hS x (h hxT) hx (h hnT)

/-- A flat cone is always pointed (contains `0`). -/
theorem Flat.pointed {S : ConvexCone R M} (hS : S.Flat) : S.Pointed := by
  obtain ‚ü®x, hx, _, hxneg‚ü© := hS
  rw [Pointed, ‚Üê add_neg_cancel x]
  exact add_mem hx hxneg

/-- A blunt cone (one not containing `0`) is always salient. -/
theorem Blunt.salient {S : ConvexCone R M} : S.Blunt ‚Üí S.Salient := by
  rw [salient_iff_not_flat, blunt_iff_not_pointed]
  exact mt Flat.pointed

/-- A pointed convex cone defines a preorder. -/
def toPreorder (h‚ÇÅ : S.Pointed) : Preorder M where
  le x y := y - x ‚àà S
  le_refl x := by rw [sub_self x]; exact h‚ÇÅ
  le_trans x y z xy zy := by simpa using add_mem zy xy

/-- A pointed and salient cone defines a partial order. -/
def toPartialOrder (h‚ÇÅ : S.Pointed) (h‚ÇÇ : S.Salient) : PartialOrder M :=
  { toPreorder S h‚ÇÅ with
    le_antisymm := by
      intro a b ab ba
      by_contra h
      have h' : b - a ‚â† 0 := fun h'' => h (eq_of_sub_eq_zero h'').symm
      have H := h‚ÇÇ (b - a) ab h'
      rw [neg_sub b a] at H
      exact H ba }

/-- A pointed and salient cone defines an `IsOrderedAddMonoid`. -/
lemma toIsOrderedAddMonoid (h‚ÇÅ : S.Pointed) (h‚ÇÇ : S.Salient) :
    let _ := toPartialOrder S h‚ÇÅ h‚ÇÇ
    IsOrderedAddMonoid M :=
  let _ := toPartialOrder S h‚ÇÅ h‚ÇÇ
  { add_le_add_left := by
      intro a b hab c
      change c + b - (c + a) ‚àà S
      rw [add_sub_add_left_eq_sub]
      exact hab }

end AddCommGroup

section Module

variable [AddCommMonoid M] [Module R M]

instance : Zero (ConvexCone R M) :=
  ‚ü®‚ü®0, fun _ _ => by simp, fun _ => by simp‚ü©‚ü©

@[simp]
theorem mem_zero (x : M) : x ‚àà (0 : ConvexCone R M) ‚Üî x = 0 :=
  Iff.rfl

@[simp]
theorem coe_zero : ((0 : ConvexCone R M) : Set M) = 0 :=
  rfl

theorem pointed_zero : (0 : ConvexCone R M).Pointed := by rw [Pointed, mem_zero]

instance instAdd : Add (ConvexCone R M) :=
  ‚ü®fun K‚ÇÅ K‚ÇÇ =>
    { carrier := { z | ‚àÉ x ‚àà K‚ÇÅ, ‚àÉ y ‚àà K‚ÇÇ, x + y = z }
      smul_mem' := by
        rintro c hc _ ‚ü®x, hx, y, hy, rfl‚ü©
        rw [smul_add]
        use c ‚Ä¢ x, K‚ÇÅ.smul_mem hc hx, c ‚Ä¢ y, K‚ÇÇ.smul_mem hc hy
      add_mem' := by
        rintro _ ‚ü®x‚ÇÅ, hx‚ÇÅ, x‚ÇÇ, hx‚ÇÇ, rfl‚ü© y ‚ü®y‚ÇÅ, hy‚ÇÅ, y‚ÇÇ, hy‚ÇÇ, rfl‚ü©
        use x‚ÇÅ + y‚ÇÅ, add_mem hx‚ÇÅ hy‚ÇÅ, x‚ÇÇ + y‚ÇÇ, add_mem hx‚ÇÇ hy‚ÇÇ
        abel }‚ü©

@[simp]
theorem mem_add {K‚ÇÅ K‚ÇÇ : ConvexCone R M} {a : M} :
    a ‚àà K‚ÇÅ + K‚ÇÇ ‚Üî ‚àÉ x ‚àà K‚ÇÅ, ‚àÉ y ‚àà K‚ÇÇ, x + y = a :=
  Iff.rfl

instance instAddZeroClass : AddZeroClass (ConvexCone R M) where
  zero_add _ := by ext; simp
  add_zero _ := by ext; simp

instance instAddCommSemigroup : AddCommSemigroup (ConvexCone R M) where
  add := Add.add
  add_assoc _ _ _ := SetLike.coe_injective <| add_assoc _ _ _
  add_comm _ _ := SetLike.coe_injective <| add_comm _ _

end Module

end OrderedSemiring

section Field
variable [Field ùïú] [LinearOrder ùïú] [IsStrictOrderedRing ùïú] [AddCommGroup M] [Module ùïú M]
  {C : ConvexCone ùïú M} {s : Set M} {x : M}

/-- The cone hull of a convex set is simply the union of the open halflines through that set. -/
lemma mem_hull_of_convex (hs : Convex ùïú s) : x ‚àà hull ùïú s ‚Üî ‚àÉ r : ùïú, 0 < r ‚àß x ‚àà r ‚Ä¢ s where
  mp hx := hull_min (C := {
              carrier := {y | ‚àÉ r : ùïú, 0 < r ‚àß y ‚àà r ‚Ä¢ s}
              smul_mem' := by
                intro r‚ÇÅ hr‚ÇÅ y ‚ü®r‚ÇÇ, hr‚ÇÇ, hy‚ü©
                refine ‚ü®r‚ÇÅ * r‚ÇÇ, mul_pos hr‚ÇÅ hr‚ÇÇ, ?_‚ü©
                rw [mul_smul]
                exact smul_mem_smul_set hy
              add_mem' := by
                rintro y‚ÇÅ ‚ü®r‚ÇÅ, hr‚ÇÅ, hy‚ÇÅ‚ü© y‚ÇÇ ‚ü®r‚ÇÇ, hr‚ÇÇ, hy‚ÇÇ‚ü©
                refine ‚ü®r‚ÇÅ + r‚ÇÇ, add_pos hr‚ÇÅ hr‚ÇÇ, ?_‚ü©
                rw [hs.add_smul hr‚ÇÅ.le hr‚ÇÇ.le]
                exact add_mem_add hy‚ÇÅ hy‚ÇÇ
            }) (fun y hy ‚Ü¶ ‚ü®1, by simpa‚ü©) hx
  mpr := by rintro ‚ü®r, hr, y, hy, rfl‚ü©; exact (hull ùïú s).smul_mem hr <| subset_hull hy

lemma disjoint_hull_left_of_convex (hs : Convex ùïú s) : Disjoint (hull ùïú s) C ‚Üî Disjoint s C where
  mp := by rw [‚Üê disjoint_coe]; exact .mono_left subset_hull
  mpr := by
    simp_rw [‚Üê disjoint_coe, disjoint_left, SetLike.mem_coe, mem_hull_of_convex hs]
    rintro hsC _ ‚ü®r, hr, y, hy, rfl‚ü©
    exact (C.smul_mem_iff hr).not.mpr (hsC hy)

lemma disjoint_hull_right_of_convex (hs : Convex ùïú s) : Disjoint C (hull ùïú s) ‚Üî Disjoint ‚ÜëC s := by
  rw [disjoint_comm, disjoint_hull_left_of_convex hs, disjoint_comm]

end Field
end ConvexCone

namespace Submodule

/-! ### Submodules are cones -/


section OrderedSemiring

variable [Semiring R] [PartialOrder R] [IsOrderedRing R]

section AddCommMonoid

variable [AddCommMonoid M] [Module R M]

/-- Every submodule is trivially a convex cone. -/
def toConvexCone (S : Submodule R M) : ConvexCone R M where
  carrier := S
  smul_mem' c _ _ hx := S.smul_mem c hx
  add_mem' _ hx _ hy := add_mem hx hy

@[simp]
theorem coe_toConvexCone (S : Submodule R M) : ‚ÜëS.toConvexCone = (S : Set M) :=
  rfl

@[simp]
theorem mem_toConvexCone {x : M} {S : Submodule R M} : x ‚àà S.toConvexCone ‚Üî x ‚àà S :=
  Iff.rfl

@[simp]
theorem toConvexCone_le_iff {S C‚ÇÇ : Submodule R M} : S.toConvexCone ‚â§ C‚ÇÇ.toConvexCone ‚Üî S ‚â§ C‚ÇÇ :=
  Iff.rfl

@[simp]
theorem toConvexCone_bot : (‚ä• : Submodule R M).toConvexCone = 0 :=
  rfl

@[simp]
theorem toConvexCone_top : (‚ä§ : Submodule R M).toConvexCone = ‚ä§ :=
  rfl

@[simp]
theorem toConvexCone_inf (S C‚ÇÇ : Submodule R M) :
    (S ‚äì C‚ÇÇ).toConvexCone = S.toConvexCone ‚äì C‚ÇÇ.toConvexCone :=
  rfl

@[simp]
theorem pointed_toConvexCone (S : Submodule R M) : S.toConvexCone.Pointed :=
  S.zero_mem

end AddCommMonoid

end OrderedSemiring

end Submodule

/-! ### Positive cone of an ordered module -/

namespace ConvexCone

section PositiveCone
variable [Semiring R] [PartialOrder R] [IsOrderedRing R] [AddCommMonoid M] [PartialOrder M]
  [IsOrderedAddMonoid M] [Module R M] [PosSMulMono R M] {x : M}

variable (R M) in
/-- The positive cone is the convex cone formed by the set of nonnegative elements in an ordered
module. -/
def positive : ConvexCone R M where
  carrier := Set.Ici 0
  smul_mem' _ hc _ (hx : _ ‚â§ _) := smul_nonneg hc.le hx
  add_mem' _ (hx : _ ‚â§ _) _ (hy : _ ‚â§ _) := add_nonneg hx hy

@[simp]
theorem mem_positive : x ‚àà positive R M ‚Üî 0 ‚â§ x := .rfl

variable (R M) in
@[simp]
theorem coe_positive : ‚Üë(positive R M) = Set.Ici (0 : M) :=
  rfl

/-- The positive cone of an ordered module is always salient. -/
theorem salient_positive {M : Type*} [AddCommGroup M] [PartialOrder M] [IsOrderedAddMonoid M]
    [Module R M] [PosSMulMono R M] : Salient (positive R M) := fun x xs hx hx' =>
  lt_irrefl (0 : M)
    (calc
      0 < x := lt_of_le_of_ne xs hx.symm
      _ ‚â§ x + -x := le_add_of_nonneg_right hx'
      _ = 0 := add_neg_cancel x
      )

/-- The positive cone of an ordered module is always pointed. -/
theorem pointed_positive : Pointed (positive R M) :=
  le_refl 0

end PositiveCone

section StrictlyPositiveCone
variable [Semiring R] [PartialOrder R] [IsOrderedRing R] [AddCommGroup M] [PartialOrder M]
  [IsOrderedAddMonoid M] [Module R M] [PosSMulStrictMono R M] {x : M}

variable (R M) in
/-- The cone of strictly positive elements.

Note that this naming diverges from the mathlib convention of `pos` and `nonneg` due to "positive
cone" (`ConvexCone.positive`) being established terminology for the non-negative elements. -/
def strictlyPositive : ConvexCone R M where
  carrier := Set.Ioi 0
  smul_mem' _ hc _ (hx : _ < _) := smul_pos hc hx
  add_mem' _ hx _ hy := add_pos hx hy

@[simp]
theorem mem_strictlyPositive : x ‚àà strictlyPositive R M ‚Üî 0 < x :=
  Iff.rfl

variable (R M) in
@[simp]
theorem coe_strictlyPositive : ‚Üë(strictlyPositive R M) = Set.Ioi (0 : M) :=
  rfl

theorem strictlyPositive_le_positive : strictlyPositive R M ‚â§ positive R M := fun _ => le_of_lt

@[deprecated (since := "2025-04-20")]
alias positive_le_strictlyPositive := strictlyPositive_le_positive

/-- The strictly positive cone of an ordered module is always salient. -/
theorem salient_strictlyPositive : Salient (strictlyPositive R M) :=
  salient_positive.anti strictlyPositive_le_positive

/-- The strictly positive cone of an ordered module is always blunt. -/
theorem blunt_strictlyPositive : Blunt (strictlyPositive R M) :=
  lt_irrefl 0

end StrictlyPositiveCone

end ConvexCone

/-! ### Cone over a convex set -/


section ConeFromConvex

variable [Field R] [LinearOrder R] [IsStrictOrderedRing R] [AddCommGroup M] [Module R M]

namespace Convex

/-- The set of vectors proportional to those in a convex set forms a convex cone. -/
def toCone (s : Set M) (hs : Convex R s) : ConvexCone R M := by
  apply ConvexCone.mk (‚ãÉ (c : R) (_ : 0 < c), c ‚Ä¢ s) <;> simp only [mem_iUnion, mem_smul_set]
  ¬∑ rintro c c_pos _ ‚ü®c', c'_pos, x, hx, rfl‚ü©
    exact ‚ü®c * c', mul_pos c_pos c'_pos, x, hx, (smul_smul _ _ _).symm‚ü©
  ¬∑ rintro _ ‚ü®cx, cx_pos, x, hx, rfl‚ü© _ ‚ü®cy, cy_pos, y, hy, rfl‚ü©
    have : 0 < cx + cy := add_pos cx_pos cy_pos
    refine ‚ü®_, this, _, convex_iff_div.1 hs hx hy cx_pos.le cy_pos.le this, ?_‚ü©
    simp only [smul_add, smul_smul, mul_div_assoc', mul_div_cancel_left‚ÇÄ _ this.ne']

variable {s : Set M} (hs : Convex R s) {x : M}

theorem mem_toCone : x ‚àà hs.toCone s ‚Üî ‚àÉ c : R, 0 < c ‚àß ‚àÉ y ‚àà s, c ‚Ä¢ y = x := by
  simp only [toCone, ConvexCone.mem_mk, mem_iUnion, mem_smul_set, eq_comm, exists_prop]

theorem mem_toCone' : x ‚àà hs.toCone s ‚Üî ‚àÉ c : R, 0 < c ‚àß c ‚Ä¢ x ‚àà s := by
  refine hs.mem_toCone.trans ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®c, hc, y, hy, rfl‚ü©
    exact ‚ü®c‚Åª¬π, inv_pos.2 hc, by rwa [smul_smul, inv_mul_cancel‚ÇÄ hc.ne', one_smul]‚ü©
  ¬∑ rintro ‚ü®c, hc, hcx‚ü©
    exact ‚ü®c‚Åª¬π, inv_pos.2 hc, _, hcx, by rw [smul_smul, inv_mul_cancel‚ÇÄ hc.ne', one_smul]‚ü©

theorem subset_toCone : s ‚äÜ hs.toCone s := fun x hx =>
  hs.mem_toCone'.2 ‚ü®1, zero_lt_one, by rwa [one_smul]‚ü©

/-- `hs.toCone s` is the least cone that includes `s`. -/
theorem toCone_isLeast : IsLeast { t : ConvexCone R M | s ‚äÜ t } (hs.toCone s) := by
  refine ‚ü®hs.subset_toCone, fun t ht x hx => ?_‚ü©
  rcases hs.mem_toCone.1 hx with ‚ü®c, hc, y, hy, rfl‚ü©
  exact t.smul_mem hc (ht hy)

theorem toCone_eq_sInf : hs.toCone s = sInf { t : ConvexCone R M | s ‚äÜ t } :=
  hs.toCone_isLeast.isGLB.sInf_eq.symm

end Convex

theorem convexHull_toCone_isLeast (s : Set M) :
    IsLeast { t : ConvexCone R M | s ‚äÜ t } ((convex_convexHull R s).toCone _) := by
  convert (convex_convexHull R s).toCone_isLeast using 1
  ext t
  exact ‚ü®fun h => convexHull_min h t.convex, (subset_convexHull R s).trans‚ü©

theorem convexHull_toCone_eq_sInf (s : Set M) :
    (convex_convexHull R s).toCone _ = sInf { t : ConvexCone R M | s ‚äÜ t } :=
  Eq.symm <| IsGLB.sInf_eq <| IsLeast.isGLB <| convexHull_toCone_isLeast s

end ConeFromConvex
