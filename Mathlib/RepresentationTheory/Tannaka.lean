/-
Copyright (c) 2025 Yacine Benmeuraiem. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yacine Benmeuraiem
-/
import Mathlib.RepresentationTheory.FDRep

/-!
# Tannaka duality for finite groups

In this file we prove Tannaka duality for finite groups.

The theorem can be formulated as follows: for any integral domain `k`, a finite group `G` can be
recovered from `FDRep k G`, the monoidal category of finite dimensional `k`-linear representations
of `G`, and the monoidal forgetful functor `forget : FDRep k G ‚•§ FGModuleCat k`.

More specifically, the main result is the isomorphism `equiv : G ‚âÉ* Aut (forget k G)`.

## Reference

<https://math.leidenuniv.nl/scripties/1bachCommelin.pdf>
-/

noncomputable section

open CategoryTheory MonoidalCategory ModuleCat Finset Pi

universe u

namespace TannakaDuality

namespace FiniteGroup

variable {k G : Type u} [CommRing k] [Group G]

section definitions

instance : (forget‚ÇÇ (FDRep k G) (FGModuleCat k)).Monoidal := by
  change (Action.forget _ _).Monoidal; infer_instance

variable (k G) in
/-- The monoidal forgetful functor from `FDRep k G` to `FGModuleCat k`. -/
def forget := LaxMonoidalFunctor.of (forget‚ÇÇ (FDRep k G) (FGModuleCat k))

/-- Definition of `hom g : Aut (forget k G)` by its components. -/
@[simps]
def equivApp (g : G) (X : FDRep k G) : X.V ‚âÖ X.V where
  hom := ofHom (X.œÅ g)
  inv := ofHom (X.œÅ g‚Åª¬π)
  hom_inv_id := by
    ext x
    change (X.œÅ g‚Åª¬π * X.œÅ g) x = x
    simp [‚Üê map_mul]
  inv_hom_id := by
    ext x
    change (X.œÅ g * X.œÅ g‚Åª¬π) x = x
    simp [‚Üê map_mul]

variable (k G) in
/-- The group homomorphism `G ‚Üí* Aut (forget k G)` shown to be an isomorphism. -/
def equivHom : G ‚Üí* Aut (forget k G) where
  toFun g :=
    LaxMonoidalFunctor.isoOfComponents (equivApp g) (fun f ‚Ü¶ (f.comm g).symm) rfl (by intros; rfl)
  map_one' := by ext; simp; rfl
  map_mul' _ _ := by ext; simp; rfl

/-- The representation on `G ‚Üí k` induced by multiplication on the right in `G`. -/
@[simps]
def rightRegular : Representation k G (G ‚Üí k) where
  toFun s := {
    toFun f t := f (t * s)
    map_add' _ _ := rfl
    map_smul' _ _ := rfl
  }
  map_one' := by
    ext
    simp
  map_mul' _ _ := by
    ext
    simp [mul_assoc]

/-- The representation on `G ‚Üí k` induced by multiplication on the left in `G`. -/
@[simps]
def leftRegular : Representation k G (G ‚Üí k) where
  toFun s := {
    toFun f t := f (s‚Åª¬π * t)
    map_add' _ _ := rfl
    map_smul' _ _ := rfl
  }
  map_one' := by
    ext
    simp
  map_mul' _ _ := by
    ext
    simp [mul_assoc]

variable [Fintype G]

variable (k G) in
/-- The right regular representation `rightRegular` on `G ‚Üí k` as a `FDRep k G`. -/
def rightFDRep : FDRep k G := FDRep.of rightRegular

/-- Map sending `Œ∑ : Aut (forget k G)` to its component at `rightFDRep k G` as a linear map. -/
def toRightFDRepComp (Œ∑ : Aut (forget k G)) : (G ‚Üí k) ‚Üí‚Çó[k] (G ‚Üí k) :=
  (Œ∑.hom.hom.app (rightFDRep k G)).hom

end definitions

variable [Fintype G]

lemma equivHom_inj [Nontrivial k] [DecidableEq G] : Function.Injective (equivHom k G) := by
  rw [injective_iff_map_eq_one]
  intro s h
  apply_fun toRightFDRepComp at h
  apply_fun (¬∑ (single 1 1) 1) at h
  change (single 1 1 : G ‚Üí k) (1 * s) = (single 1 1 : G ‚Üí k) 1 at h
  simp_all [single_apply]

/-- An algebra morphism `œÜ : (G ‚Üí k) ‚Üí‚Çê[k] k` is an evaluation map. -/
lemma eval_of_alghom [IsDomain k] {G : Type u} [DecidableEq G] [Fintype G] (œÜ : (G ‚Üí k) ‚Üí‚Çê[k] k) :
    ‚àÉ (s : G), œÜ = evalAlgHom _ _ s := by
  have h1 := map_one œÜ
  rw [‚Üê univ_sum_single (1 : G ‚Üí k), map_sum] at h1
  obtain ‚ü®s, hs‚ü© : ‚àÉ (s : G), œÜ (single s 1) ‚â† 0 := by
    by_contra
    simp_all
  have h2 : ‚àÄ t ‚â† s, œÜ (single t 1) = 0 := by
    intros
    apply eq_zero_of_ne_zero_of_mul_right_eq_zero hs
    rw [‚Üê map_mul]
    convert map_zero œÜ
    ext u
    by_cases u = s <;> simp_all
  have h3 : œÜ (single s 1) = 1 := by
    rwa [Fintype.sum_eq_single s] at h1
    exact h2
  use s
  apply AlgHom.toLinearMap_injective
  apply Basis.ext (basisFun k G)
  intro t
  by_cases t = s <;> simp_all

/-- The `FDRep k G` morphism induced by multiplication on `G ‚Üí k`. -/
def mulRepHom : rightFDRep k G ‚äó rightFDRep k G ‚ü∂ rightFDRep k G where
  hom := ofHom (LinearMap.mul' k (G ‚Üí k))
  comm := by
    intro
    ext (u : TensorProduct k (G ‚Üí k) (G ‚Üí k))
    refine TensorProduct.induction_on u rfl (fun _ _ ‚Ü¶ rfl) ?_
    intro _ _ hx hy
    simp only [map_add, hx, hy]

/-- For `Œ∑ : Aut (forget k G)`, `toRightFDRepComp Œ∑` preserves multiplication -/
lemma map_mul_toRightFDRepComp (Œ∑ : Aut (forget k G)) (f g : G ‚Üí k) :
    (toRightFDRepComp Œ∑) (f * g) = ((toRightFDRepComp Œ∑) f) * ((toRightFDRepComp Œ∑) g) := by
  have nat := Œ∑.hom.hom.naturality mulRepHom
  have tensor := Œ∑.hom.isMonoidal.tensor
  have F_Œº {X Y} : Functor.LaxMonoidal.Œº (forget k G).toFunctor X Y = ùüô _ := rfl
  simp only [F_Œº, Category.id_comp, Category.comp_id] at tensor
  rw [tensor] at nat
  apply_fun Hom.hom at nat
  apply_fun (¬∑ (f ‚äó‚Çú[k] g)) at nat
  exact nat

/-- For `Œ∑ : Aut (forget k G)`, `toRightFDRepComp Œ∑` gives rise to
an algebra morphism `(G ‚Üí k) ‚Üí‚Çê[k] (G ‚Üí k)`. -/
def algHomOfRightFDRepComp (Œ∑ : Aut (forget k G)) : (G ‚Üí k) ‚Üí‚Çê[k] (G ‚Üí k) := by
  refine AlgHom.ofLinearMap (toRightFDRepComp Œ∑) ?_ (map_mul_toRightFDRepComp Œ∑)
  let Œ±_inv : (G ‚Üí k) ‚Üí (G ‚Üí k) := (Œ∑.inv.hom.app (rightFDRep k G)).hom
  have := Œ∑.inv_hom_id
  apply_fun NatTrans.app ‚àò LaxMonoidalFunctor.Hom.hom at this
  replace := congrFun this (rightFDRep k G)
  apply_fun (Hom.hom ¬∑ (1 : G ‚Üí k)) at this
  change (toRightFDRepComp Œ∑) (Œ±_inv 1) = (1 : G ‚Üí k) at this
  have h := this
  rwa [‚Üê one_mul (Œ±_inv 1), map_mul_toRightFDRepComp, h, mul_one] at this

variable [DecidableEq G]

/-- `leftRegular` as a morphism `rightFDRep k G ‚ü∂ rightFDRep k G` in `FDRep k G`. -/
def leftRegularFDRepHom (s : G) : rightFDRep k G ‚ü∂ rightFDRep k G where
  hom := ofHom (leftRegular s)
  comm := by
    intro (t : G)
    ext (f : G ‚Üí k)
    funext u
    change (leftRegular s) ((rightRegular t) f) u = (rightRegular t) ((leftRegular s) f) u
    simp [mul_assoc]

lemma toRightFDRepComp_in_rightRegular [IsDomain k] (Œ∑ : Aut (forget k G)) :
    ‚àÉ (s : G), toRightFDRepComp Œ∑ = rightRegular s := by
  obtain ‚ü®s, hs‚ü© := eval_of_alghom ((evalAlgHom _ _ 1).comp (algHomOfRightFDRepComp Œ∑))
  use s
  apply Basis.ext (basisFun k G)
  intro u
  ext t
  have nat := Œ∑.hom.hom.naturality (leftRegularFDRepHom t‚Åª¬π)
  apply_fun Hom.hom at nat
  calc
    _ = leftRegular t‚Åª¬π (toRightFDRepComp Œ∑ (single u 1)) 1 := by simp
    _ = toRightFDRepComp Œ∑ (leftRegular t‚Åª¬π (single u 1)) 1 :=
      congrFun (congrFun (congrArg DFunLike.coe nat) (single u 1)).symm 1
    _ = evalAlgHom _ _ s (leftRegular t‚Åª¬π (single u 1)) :=
      congrFun (congrArg DFunLike.coe hs) ((leftRegular t‚Åª¬π) (single u 1))
    _ = _ := by
      by_cases u = t * s <;> simp_all [single_apply]

/-- Auxiliary map for the proof of `toRightFDRepComp_inj`. -/
@[simps]
def auxLinearMap {X : FDRep k G} (v : X) : (G ‚Üí k) ‚Üí‚Çó[k] X where
  toFun f := ‚àë s : G, (f s) ‚Ä¢ (X.œÅ s‚Åª¬π v)
  map_add' _ _ := by
    simp only [add_apply, add_smul]
    exact sum_add_distrib
  map_smul' _ _ := by
    simp only [smul_apply, smul_eq_mul, RingHom.id_apply, smul_sum, smul_smul]

lemma auxLinearMap_single_id {X : FDRep k G} (v : X) : (auxLinearMap v) (single 1 1) = v := by
  rw [auxLinearMap_apply]
  calc
    _ = ‚àë s ‚àà {1}·∂ú, single 1 1 s ‚Ä¢ (X.œÅ s‚Åª¬π) v + single 1 1 1 ‚Ä¢ (X.œÅ 1‚Åª¬π) v :=
      Fintype.sum_eq_sum_compl_add 1 _
    _ = (single 1 1 : G ‚Üí k) 1 ‚Ä¢ (X.œÅ 1‚Åª¬π) v := by
      apply add_left_eq_self.mpr
      apply sum_eq_zero
      simp_all
    _ = _ := by
      simp

/-- Auxiliary representation morphism for the proof of `toRightFDRepComp_inj`. -/
@[simps]
def auxFDRepHom (X : FDRep k G) (v : X) : (rightFDRep k G) ‚ü∂ X where
  hom := ofHom (auxLinearMap v)
  comm := by
    intro (t : G)
    ext (f : G ‚Üí k)
    change (auxLinearMap v) (rightRegular t f) = X.œÅ t (auxLinearMap v f)
    simp only [auxLinearMap_apply, map_sum]
    set œÜ_term := fun (X : FDRep k G) (f : G ‚Üí k) v s ‚Ü¶ (f s) ‚Ä¢ (X.œÅ s‚Åª¬π v)
    have := sum_map univ (mulRightEmbedding t‚Åª¬π) (œÜ_term X (rightRegular t f) v)
    simp only [œÜ_term, univ_map_embedding] at this
    rw [this]
    apply sum_congr rfl
    simp

lemma toRightFDRepComp_inj : Function.Injective <| @toRightFDRepComp k G _ _ _ := by
  intro Œ∑‚ÇÅ Œ∑‚ÇÇ h
  ext X v
  have h1 := Œ∑‚ÇÅ.hom.hom.naturality (auxFDRepHom X v)
  have h2 := Œ∑‚ÇÇ.hom.hom.naturality (auxFDRepHom X v)
  rw [hom_ext h, ‚Üê h2] at h1
  apply_fun Hom.hom at h1
  apply_fun (¬∑ (single 1 1)) at h1
  change Hom.hom _ ((auxLinearMap v) _) = Hom.hom _ ((auxLinearMap v) _) at h1
  rw [auxLinearMap_single_id] at h1
  exact h1

lemma equivHom_surj [IsDomain k] : Function.Surjective (equivHom k G) := by
  intro Œ∑
  obtain ‚ü®s, h‚ü© := toRightFDRepComp_in_rightRegular Œ∑
  use s
  apply toRightFDRepComp_inj
  exact h.symm

theorem tannaka_duality [IsDomain k] : Function.Bijective (equivHom k G) :=
  ‚ü®equivHom_inj, equivHom_surj‚ü©

variable (k G) in
/-- Tannaka duality for finite groups:

A group `G` is isomorphic to `Aut (forget k G)`, where `k` is any integral domain,
and `forget k G` is the monoidal forgetful functor `FDRep k G ‚•§ FGModuleCat k G`. -/
def equiv [IsDomain k] : G ‚âÉ* Aut (forget k G) :=
  MulEquiv.ofBijective (equivHom k G) tannaka_duality

end FiniteGroup

end TannakaDuality
